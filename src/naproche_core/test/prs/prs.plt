:-begin_tests(prs).



% Empty Text
test('empty text') :-
	prs:build_prs(PRS,[]),
	!,
	PRS = id~0..conds~[]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

% Contradiction test

test('contradiction'):-
	prs:build_prs(PRS,[sentence(1,[contradiction])]),
	!,
	PRS = id~0..conds~[id~1..conds~[contradiction]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

% formula tests
test('x=x') :-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[
		id~1..conds~[
			holds(2), 
			math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), 
			math_id(1, type~variable..arity~0..name~x)]..
		drefs~[2, 1]..
		mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=), type~variable..arity~0..name~x]..
		rrefs~[]..
		accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..
		accbefore~[]
	]..
	drefs~[]..
	mrefs~[]..
	rrefs~[]..
	accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..
	accbefore~[].

test('x=y.y=z.') :-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',y])]),sentence(2,[math([y,'=',z])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(3)]..drefs~[1, 2, 3]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[], id~2..conds~[math_id(4, type~variable..arity~0..name~z), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z]), holds(5)]..drefs~[4, 5]..mrefs~[type~variable..arity~0..name~z, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(4, type~variable..arity~0..name~z), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(4, type~variable..arity~0..name~z), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z])]..accbefore~[].

% coordinations with "if", "and", "or" and "ie":

test('if x=y, then y=x') :-
	prs:build_prs(PRS,[sentence(1,[if,math([x,'=',y]),',',then,math([y,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~prot(1)..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(3)]..drefs~[1, 2, 3]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]=>id~apod(1)..conds~[math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]), holds(4)]..drefs~[4]..mrefs~[type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('if x=y then also y=x') :-
	prs:build_prs(PRS,[sentence(1,[if,math([x,'=',y]),then,also,math([y,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~prot(1)..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(3)]..drefs~[1, 2, 3]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]=>id~apod(1)..conds~[math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]), holds(4)]..drefs~[4]..mrefs~[type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('x=y implies y=x') :-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',y]),implies,math([y,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~prot(1)..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(3)]..drefs~[1, 2, 3]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]=>id~apod(1)..conds~[math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]), holds(4)]..drefs~[4]..mrefs~[type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('simple reversed conditional'):-
    build_prs(PRS,[sentence(1,[math([x,=,x])]),sentence(2,[math([x]),is,even,if,math([x]),is,not,odd])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)], id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~apod(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[predicate(1, [even])]<=id~prot(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[neg(id~neg(prot(2))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[predicate(1, [odd])])]]].

test('reversed conditional with interesting pull-out') :-
    build_prs(PRS,[sentence(1,[an,integer,math([x]),divides,an,even,number,if,math([x]),is,even])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~pullout(1)..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [integer]), math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]=>id~conditional(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[id~apod(1)..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[predicate(2, [even]), predicate(2, [number]), predicate(1, 2, [divide])]<=id~prot(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [even])]]]].

test('simple biconditional'):-
    build_prs(PRS,[sentence(1,[math([x,=,x])]),sentence(2,[math([x]),is,even,iff,math([x]),is,not,odd])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)], id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[ (id~left_cond(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[predicate(1, [even])])<=> (id~right_cond(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[neg(id~neg(right_cond(2))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[predicate(1, [odd])])])]],
    !.

test('biconditional with new variable'):-
    build_prs(PRS,[sentence(1,[math([x]),is,even,iff,math([x]),is,not,odd])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[ (id~pullout(1)..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)])=> (id~conditional(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[ (id~left_cond(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [even])])<=> (id~right_cond(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[neg(id~neg(right_cond(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [odd])])])])]],
    !.

test('formula biconditional 1') :-
	build_prs(PRS,[sentence(1,[math(['R','(',x,',',y,')']),'iff',math(['R','(',y,',',x,')'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[]..mrefs~[]..conds~[ (id~pullout(1)..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])])=> (id~conditional(1)..drefs~[]..mrefs~[]..conds~[ (id~left_cond(1)..drefs~[3]..mrefs~[type~relation..name~R..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]]]..conds~[math_id(3, type~relation..name~R..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]]), holds(3)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), math_id(3, type~relation..name~R..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]])])<=> (id~right_cond(1)..drefs~[4]..mrefs~[type~relation..name~R..args~[type~variable..name~y..dref~2..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]]]..conds~[math_id(4, type~relation..name~R..args~[type~variable..name~y..dref~2..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]]), holds(4)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), math_id(4, type~relation..name~R..args~[type~variable..name~y..dref~2..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]])])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('formula biconditional 2') :-
	build_prs(PRS,[sentence(1,[math([x,=,x]),'iff',math([x,=,y])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[]..mrefs~[]..conds~[ (id~pullout(1)..drefs~[1]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[])])=> (id~conditional(1)..drefs~[]..mrefs~[]..conds~[ (id~left_cond(1)..drefs~[2]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]]]..conds~[math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]]), holds(2)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]])])<=> (id~right_cond(1)..drefs~[3, 4]..mrefs~[type~variable..name~y..dref~3..arity~0..args~[], type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]]..conds~[math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), holds(4)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[])])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('biconditional in conditional'):-
	build_prs(PRS,[sentence(10,['if',math([a]),'is','the','center','of',math(['\alpha']),',','and',math([b]),'is','on',math(['\alpha']),',','then',math([f,'(',a,',',c,')',=,f,'(',a,',',b,')']),'iff',math([c]),'is','on',math(['\alpha'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~10..drefs~[]..mrefs~[]..conds~[ (id~prot(10)..drefs~[]..mrefs~[]..conds~[id~comma_conjunct1(prot(10))..drefs~[1, 2]..mrefs~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~alpha..dref~2..arity~0..args~[]]..conds~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[]), predicate(1, 2, [center])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[])], id~comma_conjunct2(prot(10))..drefs~[3]..mrefs~[type~variable..name~b..dref~3..arity~0..args~[]]..conds~[math_id(3, type~variable..name~b..dref~3..arity~0..args~[]), predicate(3, 2, [on])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[]), math_id(3, type~variable..name~b..dref~3..arity~0..args~[])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[]), math_id(3, type~variable..name~b..dref~3..arity~0..args~[])])=> (id~apod(10)..drefs~[]..mrefs~[]..conds~[ (id~pullout(apod(10))..drefs~[4]..mrefs~[type~variable..name~c..dref~4..arity~0..args~[]]..conds~[math_id(4, type~variable..name~c..dref~4..arity~0..args~[])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[]), math_id(3, type~variable..name~b..dref~3..arity~0..args~[])]..accafter~[math_id(4, type~variable..name~c..dref~4..arity~0..args~[])])=> (id~conditional(apod(10))..drefs~[]..mrefs~[]..conds~[ (id~left_cond(apod(10))..drefs~[5]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~c..dref~4..arity~0..args~[]], type~function..name~f..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~3..arity~0..args~[]]]]..conds~[math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~c..dref~4..arity~0..args~[]], type~function..name~f..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~3..arity~0..args~[]]]), holds(5)]..rrefs~[]..accbefore~[math_id(4, type~variable..name~c..dref~4..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[]), math_id(3, type~variable..name~b..dref~3..arity~0..args~[]), math_id(4, type~variable..name~c..dref~4..arity~0..args~[]), math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~c..dref~4..arity~0..args~[]], type~function..name~f..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~3..arity~0..args~[]]])])<=> (id~right_cond(apod(10))..drefs~[]..mrefs~[]..conds~[predicate(4, 2, [on])]..rrefs~[]..accbefore~[math_id(4, type~variable..name~c..dref~4..arity~0..args~[])]..accafter~[math_id(4, type~variable..name~c..dref~4..arity~0..args~[])])]..rrefs~[]..accbefore~[math_id(4, type~variable..name~c..dref~4..arity~0..args~[])]..accafter~[math_id(4, type~variable..name~c..dref~4..arity~0..args~[])])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[]), math_id(3, type~variable..name~b..dref~3..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~alpha..dref~2..arity~0..args~[]), math_id(3, type~variable..name~b..dref~3..arity~0..args~[])])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('biconditional with some non-reused drefs introduced together with some reused drefs') :-
	build_prs(PRS,[sentence(1,[math(['\triangle','(',a,',',b,',',c,')']),'is','a','triangle','iff',math([a]),',',math([b]),'and',math([c]),'are','distinct','points'])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[]..mrefs~[]..conds~[ (id~pullout(1)..drefs~[1, 2, 3, 4]..mrefs~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[], type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]]..conds~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]])])=> (id~conditional(1)..drefs~[]..mrefs~[]..conds~[ (id~left_cond(1)..drefs~[5]..mrefs~[]..conds~[predicate(5, [triangle]), predicate(4, 5, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), 5])<=> (id~right_cond(1)..drefs~[6]..mrefs~[]..conds~[plural_dref(6, [1, 2, 3]), static(id~s1(plural(right_cond(1)))..drefs~[7]..mrefs~[]..conds~[predicate(7, [point]), predicate(1, 7, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), plural_dref(6, [1, 2, 3])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), plural_dref(6, [1, 2, 3]), 7]), static(id~s2(plural(right_cond(1)))..drefs~[8]..mrefs~[]..conds~[predicate(8, [point]), predicate(2, 8, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), plural_dref(6, [1, 2, 3])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), plural_dref(6, [1, 2, 3]), 8]), static(id~s3(plural(right_cond(1)))..drefs~[9]..mrefs~[]..conds~[predicate(9, [point]), predicate(3, 9, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), plural_dref(6, [1, 2, 3])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), plural_dref(6, [1, 2, 3]), 9]), predicate(1, 2, [distinct]), predicate(1, 3, [distinct]), predicate(2, 3, [distinct])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]]), plural_dref(6, [1, 2, 3])])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]])]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), math_id(2, type~variable..name~b..dref~2..arity~0..args~[]), math_id(3, type~variable..name~c..dref~3..arity~0..args~[]), math_id(4, type~function..name~triangle..args~[type~variable..name~a..dref~1..arity~0..args~[], type~variable..name~b..dref~2..arity~0..args~[], type~variable..name~c..dref~3..arity~0..args~[]])])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('biconditional with some non-reused dref introduced before some reused dref') :-
	build_prs(PRS,[sentence(1,['an','ordinal',math([x]),'contains','a','set',math([y]),'such','that',math(['R','(',x,',',y,')']),iff,math(['R','(',y,',',x,')']),',','iff',math([y]),'is','an','ordinal'])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[]..mrefs~[]..conds~[ (id~pullout(1)..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]]..conds~[predicate(1, [ordinal]), math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), predicate(2, [set]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), (id~left_cond(1)..drefs~[3]..mrefs~[type~relation..name~'R'..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]]]..conds~[math_id(3, type~relation..name~'R'..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]]), holds(3)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), math_id(3, type~relation..name~'R'..args~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[]])])<=> (id~right_cond(1)..drefs~[4]..mrefs~[type~relation..name~'R'..args~[type~variable..name~y..dref~2..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]]]..conds~[math_id(4, type~relation..name~'R'..args~[type~variable..name~y..dref~2..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]]), holds(4)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), math_id(4, type~relation..name~'R'..args~[type~variable..name~y..dref~2..arity~0..args~[], type~variable..name~x..dref~1..arity~0..args~[]])])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])])=> (id~conditional(1)..drefs~[]..mrefs~[]..conds~[ (id~left_cond(1)..drefs~[]..mrefs~[]..conds~[predicate(1, 2, [contain])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])])<=> (id~right_cond(1)..drefs~[5]..mrefs~[]..conds~[predicate(5, [ordinal]), predicate(2, 5, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), 5])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[])])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('x=y, y=z') :-	
	build_prs(PRS,[sentence(1,[math([x,'=',y]),',',math([y,'=',z])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~conjunct1(1)..conds~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), holds(3)]..drefs~[1, 2, 3]..mrefs~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2)], id~conjunct2(1)..conds~[math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2), holds(5)]..drefs~[4, 5]..mrefs~[args~[]..name~z..type~variable..arity~0..dref~4, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)].

test('x=y or x=z'):-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',y]),or,math([x,'=',z])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~disjunct1(1)..drefs~[1, 2, 3]..mrefs~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), holds(3)]v id~disjunct2(1)..drefs~[4, 5, 6]..mrefs~[args~[]..name~x..type~variable..dref~4..arity~0, args~[]..name~z..type~variable..dref~5..arity~0, args~[args~[]..name~x..type~variable..dref~4..arity~0, args~[]..name~z..type~variable..dref~5..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(4, args~[]..name~x..type~variable..dref~4..arity~0), math_id(5, args~[]..name~z..type~variable..dref~5..arity~0), math_id(6, args~[args~[]..name~x..type~variable..dref~4..arity~0, args~[]..name~z..type~variable..dref~5..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[]..name~x..type~variable..dref~4..arity~0), math_id(5, args~[]..name~z..type~variable..dref~5..arity~0), math_id(6, args~[args~[]..name~x..type~variable..dref~4..arity~0, args~[]..name~z..type~variable..dref~5..arity~0]..name~ (=)..type~relation..arity~2), holds(6)]]].

test('comma_and'):-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',y]),',',and,math([y,'=',z]),or,math([y,'=','1'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~comma_conjunct1(1)..drefs~[1, 2, 3]..mrefs~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), holds(3)], id~comma_conjunct2(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~disjunct1(comma_conjunct2(1))..drefs~[4, 5]..mrefs~[args~[]..name~z..type~variable..dref~4..arity~0, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..dref~4..arity~0), math_id(5, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[]..name~z..type~variable..dref~4..arity~0), math_id(5, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2), holds(5)]v id~disjunct2(comma_conjunct2(1))..drefs~[6]..mrefs~[args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(6, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(6, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(6)]]]].

test('consequence conjunction'):-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',y]),',',and,therefore,math([y,'=',z]),or,math([y,'=','1'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~conseq_conjunct1(1)..drefs~[1, 2, 3]..mrefs~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), holds(3)], id~conseq_conjunct2(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~disjunct1(conseq_conjunct2(1))..drefs~[4, 5]..mrefs~[args~[]..name~z..type~variable..dref~4..arity~0, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..dref~4..arity~0), math_id(5, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[]..name~z..type~variable..dref~4..arity~0), math_id(5, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2), holds(5)]v id~disjunct2(conseq_conjunct2(1))..drefs~[6]..mrefs~[args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(6, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(6, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(6)]]]].

test('ie'):-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',y]),',','i.e.',math([y,'=',z])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~conseq_conjunct1(1)..conds~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), holds(3)]..drefs~[1, 2, 3]..mrefs~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2)], id~conseq_conjunct2(1)..conds~[math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2), holds(5)]..drefs~[4, 5]..mrefs~[args~[]..name~z..type~variable..arity~0..dref~4, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)].

test('complex and-or coordination'):-
	prs:build_prs(PRS,[sentence(1,[math([x,'=',y]),',',and,math([y,'=',z]),or,math([y,'=','1']),',','i.e.',math([x,'=',z]),',',or,math([x,'=','1'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~conseq_conjunct1(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~comma_conjunct1(1)..drefs~[1, 2, 3]..mrefs~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), holds(3)], id~comma_conjunct2(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~disjunct1(comma_conjunct2(1))..drefs~[4, 5]..mrefs~[args~[]..name~z..type~variable..dref~4..arity~0, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(4, args~[]..name~z..type~variable..dref~4..arity~0), math_id(5, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[]..name~z..type~variable..dref~4..arity~0), math_id(5, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~z..type~variable..dref~4..arity~0]..name~ (=)..type~relation..arity~2), holds(5)]v id~disjunct2(comma_conjunct2(1))..drefs~[6]..mrefs~[args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(6, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(6, args~[args~[]..name~y..type~variable..dref~2..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(6)]]], id~conseq_conjunct2(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~comma_disjunct1(conseq_conjunct2(1))..drefs~[7, 8]..mrefs~[args~[]..name~z..type~variable..dref~7..arity~0, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~z..type~variable..dref~7..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(7, args~[]..name~z..type~variable..dref~7..arity~0), math_id(8, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~z..type~variable..dref~7..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(7, args~[]..name~z..type~variable..dref~7..arity~0), math_id(8, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~z..type~variable..dref~7..arity~0]..name~ (=)..type~relation..arity~2), holds(8)]v id~comma_disjunct2(conseq_conjunct2(1))..drefs~[9]..mrefs~[args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..dref~1..arity~0), math_id(2, args~[]..name~y..type~variable..dref~2..arity~0), math_id(3, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~y..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), math_id(9, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(9, args~[args~[]..name~x..type~variable..dref~1..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(9)]]]].

test('sentence "and" that is first misread as NP-coord "and"'):-
	build_prs(PRS,[sentence(1,['let',math(['\alpha']),'be','the','circle',math(['\gamma']),'such','that',math([b]),'is','the','center','of',math(['\gamma']),'and',math([c]),'is','on',math(['\gamma'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1]..mrefs~[args~[]..dref~1..name~alpha..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), 2]..conds~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), the(2, id~the(1)..drefs~[]..mrefs~[args~[]..dref~2..name~gamma..type~variable..arity~0]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), math_id(2, args~[]..dref~2..name~gamma..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[]..dref~4..name~c..type~variable..arity~0)]..conds~[predicate(2, [circle]), math_id(2, args~[]..dref~2..name~gamma..type~variable..arity~0), id~conjunct1(the(1))..drefs~[3]..mrefs~[args~[]..dref~3..name~b..type~variable..arity~0]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), math_id(2, args~[]..dref~2..name~gamma..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), math_id(2, args~[]..dref~2..name~gamma..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0)]..conds~[math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), predicate(3, 2, [center])], id~conjunct2(the(1))..drefs~[4]..mrefs~[args~[]..dref~4..name~c..type~variable..arity~0]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), math_id(2, args~[]..dref~2..name~gamma..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), math_id(2, args~[]..dref~2..name~gamma..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[]..dref~4..name~c..type~variable..arity~0)]..conds~[math_id(4, args~[]..dref~4..name~c..type~variable..arity~0), predicate(4, 2, [on])]]), predicate(1, 2, [=])]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), 2]..accafter~[math_id(1, args~[]..dref~1..name~alpha..type~variable..arity~0), 2]..conds~[]].

% Reference tests
test('sentence-initial reference'):-
	prs:build_prs(PRS,[sentence(1,[lemma,14]),sentence(2,[trivial]),sentence(3,[proof]),sentence(4,[trivial]),sentence(5,[qed]),sentence(6,[by,lemma,14,math([x,'=',x])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[theorem(lemma, id~goal(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[]..dref_cond_links~[]]..dref_cond_links~_G4009169, id~proof(3)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~4..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[]..dref_cond_links~[]]..dref_cond_links~_G4009636), id~6..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[goal(1)]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)]].

test('sentence-final reference'):-
	prs:build_prs(PRS,[sentence(1,[lemma,14]),sentence(2,[trivial]),sentence(3,[proof]),sentence(4,[trivial]),sentence(5,[qed]),sentence(6,[then,math([x,'=',x]),by,lemma,14])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[theorem(lemma, id~goal(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[]..dref_cond_links~[]]..dref_cond_links~_G87311, id~proof(3)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~4..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[]..dref_cond_links~[]]..dref_cond_links~_G87778), id~6..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[goal(1)]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)]]. 


test('reference attached to subclause'):-
	build_prs(PRS,[sentence(1,[axiom,1]),sentence(2,[math([x,=,x])]),sentence(3,[axiom,2]),sentence(4,[math([y]),is,even]),sentence(5,[math([z,=,z]),by,axiom,1,and,by,axiom,2,math([z]),is,even])]),
	!,
	PRS = id~0..conds~[id~axiom(1)..conds~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), holds(2)]..drefs~[1, 2]..mrefs~[args~[]..name~x..type~variable..arity~0..dref~1, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2)]==>id~conseq(axiom(1))..conds~[id~axiom(3)..conds~[math_id(3, args~[]..name~y..type~variable..arity~0..dref~3), predicate(3, [even])]..drefs~[3]..mrefs~[args~[]..name~y..type~variable..arity~0..dref~3]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3)]==>id~conseq(axiom(3))..conds~[id~5..conds~[id~conseq_conjunct1(5)..conds~[math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~z..type~variable..arity~0..dref~4, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2), holds(5)]..drefs~[4, 5]..mrefs~[args~[]..name~z..type~variable..arity~0..dref~4, args~[args~[]..name~z..type~variable..arity~0..dref~4, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2]..rrefs~[axiom(1)]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~z..type~variable..arity~0..dref~4, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)], id~conseq_conjunct2(5)..conds~[predicate(4, [even])]..drefs~[]..mrefs~[]..rrefs~[axiom(3)]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~z..type~variable..arity~0..dref~4, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~z..type~variable..arity~0..dref~4, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~z..type~variable..arity~0..dref~4, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..name~y..type~variable..arity~0..dref~3), math_id(4, args~[]..name~z..type~variable..arity~0..dref~4), math_id(5, args~[args~[]..name~z..type~variable..arity~0..dref~4, args~[]..name~z..type~variable..arity~0..dref~4]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~x..type~variable..arity~0..dref~1]..name~ (=)..type~relation..arity~2)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[].

test('isolated reference'):-
	prs:build_prs(PRS,[sentence(1,[axiom,1]),sentence(2,[math([x,=,x])]),sentence(3,[lemma,14]),sentence(4,[math([x,=,x])]),sentence(5,[proof]),sentence(6,[by,axiom,1]),sentence(7,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~axiom(1)..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)]==>id~conseq(axiom(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[theorem(lemma, id~goal(3)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~4..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[holds(2)]], id~proof(5)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~6..drefs~[]..mrefs~[]..rrefs~[axiom(1)]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[]])]].

test('induction reference'):-
	build_prs(PRS,[sentence(1,[by,induction,math([x,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[induction]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[].

test('contradiction with two references'):-
	build_prs(PRS,[sentence(1,[axiom,1]),sentence(2,[math([x,=,x])]),sentence(3,[axiom,2]),sentence(4,[math([x,=,y])]),sentence(5,[contradiction,by,axiom,1,and,axiom,2])]),
	!,
	PRS = id~0..conds~[id~axiom(1)..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]==>id~conseq(axiom(1))..conds~[id~axiom(3)..conds~[math_id(3, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(4)]..drefs~[3, 4]..mrefs~[type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]==>id~conseq(axiom(3))..conds~[id~5..conds~[contradiction]..drefs~[]..mrefs~[]..rrefs~[axiom(1), axiom(3)]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[].

% definition tests

test('symbol definition'):-
	prs:build_prs(PRS,[sentence(1,[define,math(['Ord','(',x,')']),iff,math([x,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~1..name~ord..args~[type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~1..name~ord..args~[type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~1..name~ord..args~[type~variable..arity~0..name~x])]..accbefore~[]:=id~definiens(1)..conds~[math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(3)]..drefs~[3]..mrefs~[type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~1..name~ord..args~[type~variable..arity~0..name~x]), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~1..name~ord..args~[type~variable..arity~0..name~x])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('adjective definition'):-
	prs:build_prs(PRS,[sentence(1,[define,math([x]),to,be,even,iff,math([x,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~1..conds~[predicate(1, [even]), math_id(1, type~variable..arity~0..name~x)]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]:=id~definiens(1)..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=))]..drefs~[2]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('collective transitive adjective definition') :-
	build_prs(PRS,[sentence(1,['define',math(['L']),'and',math(['M']),'to','be','parallel','if','and','only','if',math(['L']),'does','not','intersect',math(['M'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), predicate(1, 2, [parallel])]:=id~definiens(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0)]..conds~[neg(id~neg(definiens(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0)]..conds~[predicate(1, 2, [intersect])])]].

test('noun definition'):-
	prs:build_prs(PRS,[sentence(1,[define,math([x]),to,be,a,number,iff,math([x,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~1..conds~[predicate(1, [number]), math_id(1, type~variable..arity~0..name~x)]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]:=id~definiens(1)..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=))]..drefs~[2]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('noun definition with name'):-
	prs:build_prs(PRS,[sentence(1,[definition,'14.1']),sentence(2,[define,math([x]),to,be,a,number,iff,math([x,'=',x])]),sentence(3,[by,definition,'14.1',math(['1']),is,a,number])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(3, args~[]..name~'1'..type~constant..arity~0), 4]..conds~[id~2..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), predicate(1, [number])]:=id~definiens(2)..drefs~[2]..mrefs~[args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)], id~3..drefs~[3, 4]..mrefs~[args~[]..name~'1'..type~constant..arity~0]..rrefs~[definiens(2)]..accbefore~[]..accafter~[math_id(3, args~[]..name~'1'..type~constant..arity~0), 4]..conds~[math_id(3, args~[]..name~'1'..type~constant..arity~0), predicate(4, [number]), predicate(3, 4, [=])]].

test('intransitive verb definition'):-
	prs:build_prs(PRS,[sentence(1,[define,math([x]),to,succeed,iff,math([x,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~1..conds~[predicate(1, [succeed]), math_id(1, type~variable..arity~0..name~x)]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]:=id~definiens(1)..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=))]..drefs~[2]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('transitive verb definition'):-
	prs:build_prs(PRS,[sentence(1,[define,math([x]),to,divide,math([y]),iff,math([x,'=',y])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~1..conds~[predicate(1, 2, [divide]), math_id(2, type~variable..arity~0..name~y), math_id(1, type~variable..arity~0..name~x)]..drefs~[2, 1]..mrefs~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(2, type~variable..arity~0..name~y), math_id(1, type~variable..arity~0..name~x)]..accbefore~[]:=id~definiens(1)..conds~[holds(3), math_id(3, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]..arity~2..name~ (=))]..drefs~[3]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]..arity~2..name~ (=)]..rrefs~[]..accafter~[math_id(3, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]..arity~2..name~ (=)), math_id(2, type~variable..arity~0..name~y), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(2, type~variable..arity~0..name~y), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('explicit function definition'):-
	build_prs(PRS,[sentence(1,[define,math([f,'(',x,')']),to,be,math(['*','(',x,',',x,')'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[ (f::id~domain(1)..drefs~[1]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]=>id~definiens(1)..drefs~[2]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small], type~function..name~mul..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]]]..conds~[math_id(2, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small], type~function..name~mul..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]]), holds(2)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small], type~function..name~mul..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]])])]..rrefs~[]..accbefore~[]..accafter~[].

test('recursive function definition'):-
	build_prs(PRS,[sentence(1,[define,math(['f']),recursively]),sentence(2,[math([f,'(','1',')','=','2'])]),sentence(3,[math([f,'(',succ,'(',x,')',')','=','2','*',f,'(','x',')'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[f:: (id~domain(1)..drefs~[1]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)])=> (id~definiens(1)..drefs~[2, 3]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~constant..name~'1'..arity~0..args~[]], type~constant..name~'2'..arity~0..args~[]], type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~function..name~succ..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]], type~function..name~mul..arity~2..args~[type~constant..name~'2'..arity~0..args~[], type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]]]]..conds~[math_id(2, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~constant..name~'1'..arity~0..args~[]], type~constant..name~'2'..arity~0..args~[]]), holds(2), math_id(3, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~function..name~succ..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]], type~function..name~mul..arity~2..args~[type~constant..name~'2'..arity~0..args~[], type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]]]), holds(3)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~constant..name~'1'..arity~0..args~[]], type~constant..name~'2'..arity~0..args~[]]), math_id(3, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~function..name~succ..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]], type~function..name~mul..arity~2..args~[type~constant..name~'2'..arity~0..args~[], type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]]])])]..rrefs~[]..accbefore~[]..accafter~[].

test('complex recursive function definition'):-
	build_prs(PRS,[sentence(1,[define,math(['f']),recursively]),sentence(2,[math([f,'(',x,',','1',')','=','x'])]),sentence(3,[math([f,'(',x,',',succ,'(',y,')',')','=','x','*',f,'(',x,',',y,')'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[f:: (id~domain(1)..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)])=> (id~definiens(1)..drefs~[3, 4]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]], type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small], type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]], type~function..name~mul..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]]]..conds~[math_id(3, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]], type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]), holds(3), math_id(4, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]], type~function..name~mul..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]]), holds(4)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]], type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]], type~function..name~mul..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~function..name~f..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]])])]..rrefs~[]..accbefore~[]..accafter~[].
	
% Assumption tests
test('open assumption'):-
	prs:build_prs(PRS,[sentence(1,[assume,that,math([x,'=',x])]),sentence(2,[then,math([y,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~1..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..drefs~[2, 1]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=), type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[]==>id~conseq(1)..conds~[id~2..conds~[holds(4), math_id(4, type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(3, type~variable..arity~0..name~y)]..drefs~[4, 3]..mrefs~[type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]..arity~2..name~ (=), type~variable..arity~0..name~y]..rrefs~[]..accafter~[math_id(4, type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(3, type~variable..arity~0..name~y), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(4, type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(3, type~variable..arity~0..name~y), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('consider x to be even'):-
	prs:build_prs(PRS,[sentence(1,[consider,math([x]),to,be,even]),sentence(2,[then,math([x,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), predicate(1, [even])]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]==>id~conseq(1)..conds~[id~2..conds~[math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[2]..mrefs~[type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].


test('closed assumption'):-
	prs:build_prs(PRS,[sentence(1,[assume,that,math([x,'=',x])]),sentence(2,[then,math([x,'=',c1])]),sentence(3,[thus,math(['\forall',x,x,'=',c1])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(4, args~[[args~[]..dref~_..name~x..type~variable..arity~0], args~[args~[]..dref~_..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..name~!..type~quantifier..arity~2)]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~2..drefs~[3]..mrefs~[args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(3, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(3)]], id~3..drefs~[4]..mrefs~[args~[[args~[]..dref~_..name~x..type~variable..arity~0], args~[args~[]..dref~_..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..name~!..type~quantifier..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(4, args~[[args~[]..dref~_..name~x..type~variable..arity~0], args~[args~[]..dref~_..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..name~!..type~quantifier..arity~2)]..conds~[math_id(4, args~[[args~[]..dref~_..name~x..type~variable..arity~0], args~[args~[]..dref~_..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..name~!..type~quantifier..arity~2), holds(4)]].

test('closed variable declaration'):-
	build_prs(PRS,[sentence(1,[assume,math([x,=,x])]),sentence(2,[fix,math([y])]),sentence(3,[then,math([x,=,y])]),sentence(4,[thus,math([x,=,'0'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(5, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'0'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~2..drefs~[3]..mrefs~[args~[]..dref~3..name~y..type~variable..arity~0]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]==>id~conseq(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~3..drefs~[4]..mrefs~[args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(4)]], id~4..drefs~[5]..mrefs~[args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'0'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(5, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'0'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(5, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'0'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(5)]]].

test('thus by induction'):-
        prs:build_prs(PRS,[sentence(1,[assume,that,math([x,'=',x])]),sentence(2,[then,math([x,'=',c1])]),sentence(3,[thus,by,induction,for,all,math([x]),math([x,'=',c1])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(2)]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~2..drefs~[3]..mrefs~[args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~1..name~x..type~variable..arity~0]..name~ (=)..type~relation..arity~2), math_id(3, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(3, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(3)]], id~3..drefs~[]..mrefs~[]..rrefs~[induction]..accbefore~[]..accafter~[]..conds~[id~noun_phrase(3)..drefs~[4, 5]..mrefs~[args~[]..dref~5..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[plural_dref(4, [5]), math_id(5, args~[]..dref~5..name~x..type~variable..arity~0)]..conds~[plural_dref(4, [5]), math_id(5, args~[]..dref~5..name~x..type~variable..arity~0)]=>id~scope(3)..drefs~[6]..mrefs~[args~[args~[]..dref~5..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[plural_dref(4, [5]), math_id(5, args~[]..dref~5..name~x..type~variable..arity~0)]..accafter~[plural_dref(4, [5]), math_id(5, args~[]..dref~5..name~x..type~variable..arity~0), math_id(6, args~[args~[]..dref~5..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(6, args~[args~[]..dref~5..name~x..type~variable..arity~0, args~[]..name~c1..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(6)]]].

test('let x y be given') :-
	build_prs(PRS,[sentence(1,[let,math([x]),math([y]),be,given]),sentence(3,[let,math([x,'=',y])]),sentence(2,[then,math([y,'=',x])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[ (id~1..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]..conds~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])])==> (id~conseq(1)..drefs~[]..mrefs~[]..conds~[ (id~3..drefs~[4]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]]..conds~[math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), holds(4)]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])])==> (id~conseq(3)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[5]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]]..conds~[math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), holds(5)]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]])]]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])])]..rrefs~[]..accbefore~[]..accafter~[].

test('let $x, y$ be given') :-
	build_prs(PRS,[sentence(1,[let,math([x,',',y]),be,given]),sentence(3,[let,math([x,'=',y])]),sentence(2,[then,math([y,'=',x])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[ (id~1..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]..conds~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])])==> (id~conseq(1)..drefs~[]..mrefs~[]..conds~[ (id~3..drefs~[4]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]]..conds~[math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), holds(4)]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])])==> (id~conseq(3)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[5]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]]..conds~[math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), holds(5)]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]])]]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])])]..rrefs~[]..accbefore~[]..accafter~[].

test('consider arbitrary f(x)') :-
	build_prs(PRS,[sentence(1,[consider,arbitrary,math([f,'(',x,')'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0]..name~f..type~function]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0]..name~f..type~function)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0]..name~f..type~function)]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0]..name~f..type~function)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0]..name~f..type~function)]..conds~[]].

test('assumption with variables in functions') :-
	build_prs(PRS,[sentence(1,[consider,math([f,'(',u,',',x,')']),math([f,'(',y,',',z,')']),such,that,math([x,'<',z])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[ (id~1..drefs~[1, 2, 3, 4, 5, 6, 7, 8]..mrefs~[type~variable..name~u..dref~2..arity~0..args~[], type~variable..name~x..dref~3..arity~0..args~[], type~function..name~f..args~[type~variable..name~u..dref~2..arity~0..args~[], type~variable..name~x..dref~3..arity~0..args~[]], type~variable..name~y..dref~5..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[], type~function..name~f..args~[type~variable..name~y..dref~5..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]], type~relation..name~less..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]]]..conds~[plural_dref(1, [4, 7]), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]), math_id(3, type~variable..name~x..dref~3..arity~0..args~[]), math_id(4, type~function..name~f..args~[type~variable..name~u..dref~2..arity~0..args~[], type~variable..name~x..dref~3..arity~0..args~[]]), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]), math_id(6, type~variable..name~z..dref~6..arity~0..args~[]), math_id(7, type~function..name~f..args~[type~variable..name~y..dref~5..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]]), math_id(8, type~relation..name~less..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]]), holds(8)]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [4, 7]), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]), math_id(3, type~variable..name~x..dref~3..arity~0..args~[]), math_id(4, type~function..name~f..args~[type~variable..name~u..dref~2..arity~0..args~[], type~variable..name~x..dref~3..arity~0..args~[]]), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]), math_id(6, type~variable..name~z..dref~6..arity~0..args~[]), math_id(7, type~function..name~f..args~[type~variable..name~y..dref~5..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]]), math_id(8, type~relation..name~less..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]])])==> (id~conseq(1)..drefs~[]..mrefs~[]..conds~[]..rrefs~[]..accbefore~[plural_dref(1, [4, 7]), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]), math_id(3, type~variable..name~x..dref~3..arity~0..args~[]), math_id(4, type~function..name~f..args~[type~variable..name~u..dref~2..arity~0..args~[], type~variable..name~x..dref~3..arity~0..args~[]]), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]), math_id(6, type~variable..name~z..dref~6..arity~0..args~[]), math_id(7, type~function..name~f..args~[type~variable..name~y..dref~5..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]]), math_id(8, type~relation..name~less..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]])]..accafter~[plural_dref(1, [4, 7]), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]), math_id(3, type~variable..name~x..dref~3..arity~0..args~[]), math_id(4, type~function..name~f..args~[type~variable..name~u..dref~2..arity~0..args~[], type~variable..name~x..dref~3..arity~0..args~[]]), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]), math_id(6, type~variable..name~z..dref~6..arity~0..args~[]), math_id(7, type~function..name~f..args~[type~variable..name~y..dref~5..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]]), math_id(8, type~relation..name~less..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[], type~variable..name~z..dref~6..arity~0..args~[]])])]..rrefs~[]..accbefore~[]..accafter~[].

% Cases tests
test('2 exclusive cases'):-
	build_prs(PRS,[sentence(1,[precisely,one,of,the,following,cases,holds]),sentence(2,[math([x,=,x])]),sentence(3,[math([x,=,y])]),sentence(4,[so,math([y,=,y])])]),
	!,
	PRS = id~0..conds~[><([id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[], id~3..conds~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]]), id~4..conds~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[].

test('3 exclusive cases'):-
	build_prs(PRS,[sentence(1,[precisely,one,of,the,following,cases,holds]),sentence(2,[math([x,=,x])]),sentence(3,[math([x,=,y])]),sentence(4,[math([y,=,y])])]),
	!,
	PRS = id~0..conds~[><([id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[], id~3..conds~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[], id~4..conds~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('at most one case holds'):-
	build_prs(PRS,[sentence(1,[at,most,one,of,the,following,cases,holds]),sentence(8,[case,1]),sentence(2,[math([x,=,x])]),sentence(9,[case,2]),sentence(3,[math([x,=,y])]),sentence(10,[case,3]),sentence(4,[math([y,=,y])]),sentence(5,[so,case,1,and,case,3,are,false])]),
	!,
	PRS = id~0..conds~[<>([id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[], id~3..conds~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[], id~4..conds~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]]), id~5..conds~[neg(id~case(1, 5)..conds~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]), neg(id~case(3, 5)..conds~[math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(11)]..drefs~[10, 11]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].


test('two cases'):-
	build_prs(PRS,[sentence(1,[case,1]),sentence(2,[math([x,=,x])]),sentence(3,[then,math([x,=,z])]),sentence(4,[case,2]),sentence(5,[math([x,=,y])]),sentence(6,[then,math([y,=,z])])]),
	!,
	PRS = id~0..conds~[id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]==>id~text_case(1)..conds~[id~3..conds~[math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~z]), holds(4)]..drefs~[3, 4]..mrefs~[type~variable..arity~0..name~z, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])], id~5..conds~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(7)]..drefs~[5, 6, 7]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]==>id~text_case(2)..conds~[id~6..conds~[math_id(8, type~variable..arity~0..name~z), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z]), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..name~z, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(8, type~variable..arity~0..name~z), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z])]..accbefore~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(8, type~variable..arity~0..name~z), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z])]..accbefore~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])], id~case_distinction(0)..conds~[id~case_disjunct(5)..conds~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(7)]..drefs~[5, 6, 7]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(5, type~variable..arity~0..name~x), math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]v id~case_disjunct(2)..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('case distinction within a case distinction'):-
	build_prs(PRS,[sentence(1,[case,1]),sentence(2,[math([x,=,x])]),sentence(3,[now,there,are,two,cases]),sentence(4,[case,a]),sentence(5,[math([z,=,z])]),sentence(6,[then,math([y,=,z])]),sentence(7,[case,b]),sentence(8,[math([z,=,u])]),sentence(9,[math([u,=,z])]),sentence(10,[so,in,all,cases,math([y,=,y])]),sentence(11,[case,2]),sentence(12,[math([x,=,y])]),sentence(13,[then,math([y,=,y])])]),
	!,
	PRS = id~0..conds~[id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]==>id~text_case(1)..conds~[id~5..conds~[math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]), holds(4)]..drefs~[3, 4]..mrefs~[type~variable..arity~0..name~z, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]==>id~text_case(a)..conds~[id~6..conds~[math_id(5, type~variable..arity~0..name~y), math_id(6, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z]), holds(6)]..drefs~[5, 6]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]), math_id(5, type~variable..arity~0..name~y), math_id(6, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]), math_id(5, type~variable..arity~0..name~y), math_id(6, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z])], id~8..conds~[math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u]), holds(9)]..drefs~[7, 8, 9]..mrefs~[type~variable..arity~0..name~z, type~variable..arity~0..name~u, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]==>id~text_case(b)..conds~[id~9..conds~[math_id(10, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~u, type~variable..arity~0..name~z]), holds(10)]..drefs~[10]..mrefs~[type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~u, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u]), math_id(10, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~u, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u]), math_id(10, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~u, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u])], id~case_distinction(text_case(1))..conds~[id~case_disjunct(8)..conds~[math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u]), holds(9)]..drefs~[7, 8, 9]..mrefs~[type~variable..arity~0..name~z, type~variable..arity~0..name~u, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(7, type~variable..arity~0..name~z), math_id(8, type~variable..arity~0..name~u), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~u])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]v id~case_disjunct(5)..conds~[math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]), holds(4)]..drefs~[3, 4]..mrefs~[type~variable..arity~0..name~z, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(3, type~variable..arity~0..name~z), math_id(4, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])], id~10..conds~[math_id(11, type~variable..arity~0..name~y), math_id(12, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(12)]..drefs~[11, 12]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(11, type~variable..arity~0..name~y), math_id(12, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(11, type~variable..arity~0..name~y), math_id(12, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])], id~12..conds~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(15)]..drefs~[13, 14, 15]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]==>id~text_case(2)..conds~[id~13..conds~[math_id(16, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(16)]..drefs~[16]..mrefs~[type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(16, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), math_id(16, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])], id~case_distinction(0)..conds~[id~case_disjunct(12)..conds~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(15)]..drefs~[13, 14, 15]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(13, type~variable..arity~0..name~x), math_id(14, type~variable..arity~0..name~y), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[]v id~case_disjunct(2)..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('case distinction in assumption_text'):-
	build_prs(PRS,[
	sentence(1, [fix, math([x])]),
	sentence(2, [fix, math([y])]),
	sentence(3, [then, there, are, two, cases]),
	sentence(4, [case, 1]),
	sentence(5, [math([x, =, y])]),
	sentence(6, [then, math([x, =, y])]),
	sentence(7, [case, 2]),
	sentence(8, [math([y, =, x])]),
	sentence(9, [then, math([y, =, x])]),
	sentence(10, [so, in, all, cases, math([x, =, x])]),
	sentence(11, [thus, case, 1, or, case, 2, holds])
	]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..args~[]..name~x)]..drefs~[1]..mrefs~[type~variable..arity~0..args~[]..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)]..accbefore~[]==>id~conseq(1)..conds~[id~2..conds~[math_id(2, type~variable..arity~0..args~[]..name~y)]..drefs~[2]..mrefs~[type~variable..arity~0..args~[]..name~y]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]==>id~conseq(2)..conds~[id~5..conds~[math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(3)]..drefs~[3]..mrefs~[type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)]==>id~text_case(1)..conds~[id~6..conds~[holds(3)]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))], id~8..conds~[math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(4)]..drefs~[4]..mrefs~[type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)]==>id~text_case(2)..conds~[id~9..conds~[holds(4)]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=))], id~case_distinction(conseq(2))..conds~[id~case_disjunct(8)..conds~[math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(4)]..drefs~[4]..mrefs~[type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)]v id~case_disjunct(5)..conds~[math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(3)]..drefs~[3]..mrefs~[type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(3, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)], id~10..conds~[math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(5)]..drefs~[5]..mrefs~[type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~variable..arity~0..args~[]..name~y)], id~11..conds~[id~case(1, 11)..conds~[math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]v id~case(2, 11)..conds~[math_id(8, type~variable..arity~0..args~[]..name~y), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(8, type~variable..arity~0..args~[]..name~y), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

% Metasentence tests

test('metasentence after case introduction: two cases are false'):-
	build_prs(PRS,[sentence(1,[precisely,one,of,the,following,cases,holds]),sentence(8,[case,1]),sentence(2,[math([x,=,x])]),sentence(9,[case,2]),sentence(3,[math([x,=,y])]),sentence(10,[case,3]),sentence(4,[math([y,=,y])]),sentence(5,[so,case,1,and,case,3,are,false])]),
	!,
	PRS = id~0..conds~[><([id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[], id~3..conds~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[], id~4..conds~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]]), id~5..conds~[neg(id~case(1, 5)..conds~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]), neg(id~case(3, 5)..conds~[math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(11)]..drefs~[10, 11]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('metasentence after case introduction: two cases are true'):-
	build_prs(PRS,[sentence(1,[precisely,one,of,the,following,cases,holds]),sentence(8,[case,'1']),sentence(2,[math([x,=,x])]),sentence(9,[case,'2']),sentence(3,[math([x,=,y])]),sentence(10,[case,'3']),sentence(4,[math([y,=,y])]),sentence(5,[so,case,'1',and,case,'3',are,true])]),
	!,
	PRS = id~0..conds~[><([id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[], id~3..conds~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[], id~4..conds~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]]), id~5..conds~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(9), math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(11)]..drefs~[8, 9, 10, 11]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[].

test('metasentence after case introduction: one of four cases is wrong'):-
	build_prs(PRS,[sentence(1,[precisely,one,of,the,following,cases,holds]),sentence(8,[case,1]),sentence(2,[math([x,=,x])]),sentence(9,[case,2]),sentence(3,[math([x,=,y])]),sentence(10,[case,3]),sentence(4,[math([y,=,y])]),sentence(5,[so,case,1,or,case,3,or,case,1,or,case,2,is,false])]),
	!,
	PRS = id~0..conds~[><([id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[], id~3..conds~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[], id~4..conds~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]]), id~5..conds~[id~not_case(1, 5)..conds~[neg(id~case(1, 5)..conds~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(8, type~variable..arity~0..name~x), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]v id~or(5)..conds~[id~not_case(3, 5)..conds~[neg(id~case(3, 5)..conds~[math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(11)]..drefs~[10, 11]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(10, type~variable..arity~0..name~y), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]v id~or(or(5))..conds~[id~not_case(1, 5)..conds~[neg(id~case(1, 5)..conds~[math_id(12, type~variable..arity~0..name~x), math_id(13, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(13)]..drefs~[12, 13]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(12, type~variable..arity~0..name~x), math_id(13, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]v id~not_case(2, 5)..conds~[neg(id~case(2, 5)..conds~[math_id(14, type~variable..arity~0..name~x), math_id(15, type~variable..arity~0..name~y), math_id(16, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(16)]..drefs~[14, 15, 16]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(14, type~variable..arity~0..name~x), math_id(15, type~variable..arity~0..name~y), math_id(16, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('metasentence after case introduction: one of three cases is right'):-
	build_prs(PRS,[sentence(1,[precisely,one,of,the,following,cases,holds]),sentence(8,[case,1]),sentence(2,[math([x,=,x])]),sentence(9,[case,2]),sentence(3,[math([x,=,y])]),sentence(10,[case,3]),sentence(4,[math([y,=,y])]),sentence(5,[case,4]),sentence(6,[math([z,=,z])]),sentence(7,[so,case,1,or,case,3,or,case,4,is,true])]),
	!,
	PRS = id~0..conds~[><([id~2..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[], id~3..conds~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..name~x, type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(3, type~variable..arity~0..name~x), math_id(4, type~variable..arity~0..name~y), math_id(5, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[], id~4..conds~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(7)]..drefs~[6, 7]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(6, type~variable..arity~0..name~y), math_id(7, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[], id~6..conds~[math_id(8, type~variable..arity~0..name~z), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..name~z, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(8, type~variable..arity~0..name~z), math_id(9, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z])]..accbefore~[]]), id~7..conds~[id~case(1, 7)..conds~[math_id(10, type~variable..arity~0..name~x), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(11)]..drefs~[10, 11]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(10, type~variable..arity~0..name~x), math_id(11, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]v id~or(7)..conds~[id~case(3, 7)..conds~[math_id(12, type~variable..arity~0..name~y), math_id(13, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]), holds(13)]..drefs~[12, 13]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(12, type~variable..arity~0..name~y), math_id(13, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y])]..accbefore~[]v id~case(4, 7)..conds~[math_id(14, type~variable..arity~0..name~z), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]), holds(15)]..drefs~[14, 15]..mrefs~[type~variable..arity~0..name~z, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z]]..rrefs~[]..accafter~[math_id(14, type~variable..arity~0..name~z), math_id(15, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~z, type~variable..arity~0..name~z])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('metasentence after case proofs: at most one sentence is false'):-
	build_prs(PRS,[sentence(1,[case,1]),sentence(2,[math([x,=,x])]),sentence(3,[then,math([x,=,z])]),sentence(4,[case,2]),sentence(5,[math([x,=,y])]),sentence(6,[then,math([y,=,z])]),sentence(7,[at,most,one,of,case,1,and,case,2,is,false])]),
	!,
	PRS = id~0..conds~[id~2..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]==>id~text_case(1)..conds~[id~3..conds~[math_id(3, type~variable..arity~0..args~[]..name~z), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=)), holds(4)]..drefs~[3, 4]..mrefs~[type~variable..arity~0..args~[]..name~z, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=)]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~z), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~z), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=))], id~5..conds~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(7)]..drefs~[5, 6, 7]..mrefs~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]==>id~text_case(2)..conds~[id~6..conds~[math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=)), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..args~[]..name~z, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=)]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))], id~7..conds~[<>([id~not_case(1, 7)..conds~[neg(id~case(1, 7)..conds~[math_id(10, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(10)]..drefs~[10]..mrefs~[type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=)), math_id(10, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))])]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))], id~not_case(2, 7)..conds~[neg(id~case(2, 7)..conds~[holds(7)]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))])]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]])]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))], id~case_distinction(0)..conds~[id~case_disjunct(5)..conds~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(7)]..drefs~[5, 6, 7]..mrefs~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]v id~case_disjunct(2)..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[].

test('metasentence after case proofs: precisely one case is true'):-
	build_prs(PRS,[sentence(1,[case,1]),sentence(2,[math([x,=,x])]),sentence(3,[then,math([x,=,z])]),sentence(4,[case,2]),sentence(5,[math([x,=,y])]),sentence(6,[then,math([y,=,z])]),sentence(7,[precisely,one,of,case,1,and,case,2,is,correct])]),
	!,
	PRS = id~0..conds~[id~2..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]==>id~text_case(1)..conds~[id~3..conds~[math_id(3, type~variable..arity~0..args~[]..name~z), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=)), holds(4)]..drefs~[3, 4]..mrefs~[type~variable..arity~0..args~[]..name~z, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=)]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~z), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(3, type~variable..arity~0..args~[]..name~z), math_id(4, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~z]..name~ (=))], id~5..conds~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(7)]..drefs~[5, 6, 7]..mrefs~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]==>id~text_case(2)..conds~[id~6..conds~[math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=)), holds(9)]..drefs~[8, 9]..mrefs~[type~variable..arity~0..args~[]..name~z, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=)]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))], id~7..conds~[><([id~case(1, 7)..conds~[math_id(10, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(10)]..drefs~[10]..mrefs~[type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=)), math_id(10, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))], id~case(2, 7)..conds~[holds(7)]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]])]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~z), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~y, type~variable..arity~0..args~[]..name~z]..name~ (=))], id~case_distinction(0)..conds~[id~case_disjunct(5)..conds~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(7)]..drefs~[5, 6, 7]..mrefs~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(5, type~variable..arity~0..args~[]..name~x), math_id(6, type~variable..arity~0..args~[]..name~y), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]v id~case_disjunct(2)..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[].

test('metasentence: 2 inconsistent cases') :-
	prs:build_prs(PRS,[sentence(1,[case,1]),sentence(2,[math([x,=,x])]),sentence(3,[then,math([x,=,x])]),sentence(4,[case,2]),sentence(5,[math([x,=,y])]),sentence(6,[then,math([x,=,y])]),sentence(7,[so,in,all,cases,case,1,and,case,2,are,inconsistent])]),
	!,
	PRS = id~0..conds~[id~2..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]==>id~text_case(1)..conds~[id~3..conds~[holds(2)]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))], id~5..conds~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]==>id~text_case(2)..conds~[id~6..conds~[holds(5)]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]..accafter~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))], id~case_distinction(0)..conds~[id~case_disjunct(5)..conds~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(5)]..drefs~[3, 4, 5]..mrefs~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(3, type~variable..arity~0..args~[]..name~x), math_id(4, type~variable..arity~0..args~[]..name~y), math_id(5, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))]v id~case_disjunct(2)..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x), math_id(2, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=))]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[], id~7..conds~[neg(id~inconsistent_cases(7)..conds~[math_id(6, type~variable..arity~0..args~[]..name~x), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), holds(7), math_id(8, type~variable..arity~0..args~[]..name~y), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)), holds(9)]..drefs~[6, 7, 8, 9]..mrefs~[type~variable..arity~0..args~[]..name~x, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=), type~variable..arity~0..args~[]..name~y, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=)]..rrefs~[]..accbefore~[]..accafter~[math_id(6, type~variable..arity~0..args~[]..name~x), math_id(7, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~x]..name~ (=)), math_id(8, type~variable..arity~0..args~[]..name~y), math_id(9, type~relation..arity~2..args~[type~variable..arity~0..args~[]..name~x, type~variable..arity~0..args~[]..name~y]..name~ (=))])]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[].

% Axiom Tests

test('Axiom without identifier') :-
	prs:build_prs(PRS,[sentence(1,[axiom]),sentence(2,[math([x,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~axiom(1)..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..drefs~[2, 1]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=), type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[]==>id~conseq(axiom(1))..conds~[]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('Axiom with number identifier') :-  	
	error_logger:setval(refids,[]),
	prs:build_prs(PRS,[sentence(1,[axiom,1]),sentence(2,[math([x,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~axiom(1)..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..drefs~[2, 1]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=), type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[]==>id~conseq(axiom(1))..conds~[]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[],
	error_logger:getval(refids,[ref(axiom(1),axiom(1))]).

test('Axiom with string identifier') :-  	
	error_logger:setval(refids,[]),
	prs:build_prs(PRS,[sentence(1,[axiom,foundation]),sentence(2,[math([x,'=',x])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~axiom(1)..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..drefs~[2, 1]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=), type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[]==>id~conseq(axiom(1))..conds~[]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[],
	error_logger:getval(refids,[ref(axiom(1),axiom(foundation))]).

test('Axiom followed by text') :-
	prs:build_prs(PRS,[sentence(1,[axiom]),sentence(2,[math([x,'=',x])]),sentence(3,[in,particular,math([y,'=',y])])]),
	prs:reverse_prs(PRS,ReversedPRS),
	!,
	ReversedPRS = id~0..conds~[id~axiom(1)..conds~[holds(2), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..drefs~[2, 1]..mrefs~[type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=), type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[]==>id~conseq(axiom(1))..conds~[id~3..conds~[holds(4), math_id(4, type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]..arity~2..name~ (=)), math_id(3, type~variable..arity~0..name~y)]..drefs~[4, 3]..mrefs~[type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]..arity~2..name~ (=), type~variable..arity~0..name~y]..rrefs~[]..accafter~[math_id(4, type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]..arity~2..name~ (=)), math_id(3, type~variable..arity~0..name~y), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(4, type~relation..args~[type~variable..arity~0..name~y, type~variable..arity~0..name~y]..arity~2..name~ (=)), math_id(3, type~variable..arity~0..name~y), math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(2, type~relation..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]..arity~2..name~ (=)), math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

% Lemma tests

test('Lemma without identifier') :-
	prs:build_prs(PRS,[sentence(1,[lemma]),sentence(2,[math([x,'=',y])]),sentence(3,[proof]),sentence(4,[math([x,'=',y])]),sentence(5,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[theorem(lemma, id~goal(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]), holds(3)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])], id~proof(3)..drefs~[]..mrefs~[]..conds~[id~4..drefs~[4, 5, 6]..mrefs~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]), holds(6)]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])].

test('Lemma with two sentence proof') :-
	prs:build_prs(PRS,[sentence(1,[lemma]),sentence(2,[math([x,'=',y])]),sentence(3,[proof]),sentence(4,[math([x,'=',z])]),sentence(5,[math([z,'=',y])]),sentence(5,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[theorem(lemma, id~goal(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]), holds(3)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])], id~proof(3)..drefs~[]..mrefs~[]..conds~[id~4..drefs~[4, 5, 6]..mrefs~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small]), holds(6)]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small])], id~5..drefs~[7, 8]..mrefs~[type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(7, type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small), math_id(8, type~relation..name~ (=)..arity~2..args~[type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small]), holds(8)]..rrefs~[]..accbefore~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small])]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small]), math_id(7, type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small), math_id(8, type~relation..name~ (=)..arity~2..args~[type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small]), math_id(7, type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small), math_id(8, type~relation..name~ (=)..arity~2..args~[type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~7..arity~0..args~[]..alph~latin..cap~small])])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])].

test('Lemma with identifier') :-
	error_logger:setval(refids,[]),
	prs:build_prs(PRS,[sentence(1,[lemma,14]),sentence(2,[math([x,'=',y])]),sentence(3,[proof]),sentence(4,[math([x,'=',y])]),sentence(5,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[theorem(lemma, id~goal(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]), holds(3)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])], id~proof(3)..drefs~[]..mrefs~[]..conds~[id~4..drefs~[4, 5, 6]..mrefs~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]), holds(6)]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])],
	error_logger:getval(refids,[ref(goal(1),lemma(14))]).

test('Lemma with complex sentences'):-
	build_prs(PRS,[sentence(1,[lemma,strange]),sentence(2,[math([x]),is,a,set,if,math([x]),does,not,contain,every,set]),sentence(3,[proof]),sentence(4,[consider,math([x])]),sentence(5,[then,it,is,false,that,math(['x']),is,not,a,set]),sentence(6,[so,math([x]),is,a,set]),sentence(7,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[theorem(lemma, id~goal(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~pullout(2)..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]=>id~conditional(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[id~apod(2)..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[predicate(2, [set]), predicate(1, 2, [=])]<=id~prot(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[neg(id~neg(prot(2))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[id~noun_phrase(neg(prot(2)))..drefs~[3]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..conds~[predicate(3, [set])]=>id~verb_phrase(neg(prot(2)))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..conds~[predicate(1, 3, [contain])]])]]]], id~proof(3)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~4..drefs~[4]..mrefs~[args~[]..dref~4..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..conds~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]==>id~conseq(4)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..accafter~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0), 6]..conds~[id~5..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..accafter~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..conds~[neg(id~neg(5)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..accafter~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..conds~[neg(id~neg(neg(5))..drefs~[5]..mrefs~[]..rrefs~[]..accbefore~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..accafter~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0), 5]..conds~[predicate(5, [set]), predicate(4, 5, [=])])])], id~6..drefs~[6]..mrefs~[]..rrefs~[]..accbefore~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..accafter~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0), 6]..conds~[predicate(6, [set]), predicate(4, 6, [=])]]])].

% Theorem tests


test('Theorem without identifier') :-
	prs:build_prs(PRS,[sentence(1,[theorem]),sentence(2,[math([x,'=',y])]),sentence(3,[proof]),sentence(4,[math([x,'=',y])]),sentence(5,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[theorem(theorem, id~goal(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]), holds(3)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])], id~proof(3)..drefs~[]..mrefs~[]..conds~[id~4..drefs~[4, 5, 6]..mrefs~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]), holds(6)]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])].

test('Theorem with identifier') :-
	error_logger:setval(refids,[]),
	prs:build_prs(PRS,[sentence(1,[theorem,14]),sentence(2,[math([x,'=',y])]),sentence(3,[proof]),sentence(4,[math([x,'=',y])]),sentence(5,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[theorem(theorem, id~goal(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]), holds(3)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])], id~proof(3)..drefs~[]..mrefs~[]..conds~[id~4..drefs~[4, 5, 6]..mrefs~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small]), holds(6)]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])]]..rrefs~[]..accbefore~[]..accafter~[math_id(4, type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~4..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~5..arity~0..args~[]..alph~latin..cap~small])])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small])],
	error_logger:getval(refids,[ref(goal(1),theorem(14))]).

test('Theorem with complex sentences'):-
	build_prs(PRS,[sentence(1,[theorem,'3.12']),sentence(2,[math([x]),is,even,if,math([x]),is,not,odd]),sentence(3,[proof]),sentence(4,[suppose,math([x]),is,not,odd]),sentence(5,[then,it,is,false,that,math(['2']),does,not,divide,math([x])]),sentence(6,[so,math(['2']),divides,math([x]),',','i.e.',math([x]),is,even]),sentence(7,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[theorem(theorem, id~goal(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~pullout(2)..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]=>id~conditional(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[id~apod(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [even])]<=id~prot(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[neg(id~neg(prot(2))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [odd])])]]]], id~proof(3)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~4..drefs~[2]..mrefs~[args~[]..dref~2..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..conds~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), neg(id~neg(4)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..conds~[predicate(2, [odd])])]==>id~conseq(4)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(4, args~[]..name~'2'..type~constant..arity~0)]..conds~[id~5..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..conds~[neg(id~neg(5)..drefs~[3]..mrefs~[args~[]..name~'2'..type~constant..arity~0]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..name~'2'..type~constant..arity~0)]..conds~[math_id(3, args~[]..name~'2'..type~constant..arity~0), neg(id~neg(neg(5))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..name~'2'..type~constant..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..name~'2'..type~constant..arity~0)]..conds~[predicate(3, 2, [divide])])])], id~6..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(4, args~[]..name~'2'..type~constant..arity~0)]..conds~[id~conseq_conjunct1(6)..drefs~[4]..mrefs~[args~[]..name~'2'..type~constant..arity~0]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(4, args~[]..name~'2'..type~constant..arity~0)]..conds~[math_id(4, args~[]..name~'2'..type~constant..arity~0), predicate(4, 2, [divide])], id~conseq_conjunct2(6)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(4, args~[]..name~'2'..type~constant..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(4, args~[]..name~'2'..type~constant..arity~0)]..conds~[predicate(2, [even])]]]])].

test('Theorem with lemma'):-
	build_prs(PRS,[sentence(1,[theorem]),sentence(2,[for,all,math([x]),math([y]),math([x,'=',y])]),sentence(3,[proof]),sentence(4,[lemma]),sentence(5,[there,is,no,number]),sentence(6,[proof]),sentence(7,[trivial]),sentence(8,[qed]),sentence(9,[consider,math([x]),',',math([y])]),sentence(10,[then,math([x,'=',y])]),sentence(11,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[theorem(theorem, id~goal(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[]..mrefs~[]..conds~[ (id~noun_phrase(2)..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]..conds~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])])=> (id~scope(2)..drefs~[4]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]]..conds~[math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]), holds(4)]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]])])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[], id~proof(3)..drefs~[]..mrefs~[]..conds~[theorem(lemma, id~goal(4)..drefs~[]..mrefs~[]..conds~[id~5..drefs~[]..mrefs~[]..conds~[neg(id~neg(5)..drefs~[5]..mrefs~[]..conds~[predicate(5, [number])]..rrefs~[]..accbefore~[]..accafter~[5])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[], id~proof(6)..drefs~[]..mrefs~[]..conds~[id~7..drefs~[]..mrefs~[]..conds~[]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[]), (id~9..drefs~[6, 7, 8]..mrefs~[type~variable..name~x..dref~7..arity~0..args~[], type~variable..name~y..dref~8..arity~0..args~[]]..conds~[plural_dref(6, [7, 8]), math_id(7, type~variable..name~x..dref~7..arity~0..args~[]), math_id(8, type~variable..name~y..dref~8..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(6, [7, 8]), math_id(7, type~variable..name~x..dref~7..arity~0..args~[]), math_id(8, type~variable..name~y..dref~8..arity~0..args~[])])==> (id~conseq(9)..drefs~[]..mrefs~[]..conds~[id~10..drefs~[9]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~7..arity~0..args~[], type~variable..name~y..dref~8..arity~0..args~[]]]..conds~[math_id(9, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~7..arity~0..args~[], type~variable..name~y..dref~8..arity~0..args~[]]), holds(9)]..rrefs~[]..accbefore~[plural_dref(6, [7, 8]), math_id(7, type~variable..name~x..dref~7..arity~0..args~[]), math_id(8, type~variable..name~y..dref~8..arity~0..args~[])]..accafter~[plural_dref(6, [7, 8]), math_id(7, type~variable..name~x..dref~7..arity~0..args~[]), math_id(8, type~variable..name~y..dref~8..arity~0..args~[]), math_id(9, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~7..arity~0..args~[], type~variable..name~y..dref~8..arity~0..args~[]])]]..rrefs~[]..accbefore~[plural_dref(6, [7, 8]), math_id(7, type~variable..name~x..dref~7..arity~0..args~[]), math_id(8, type~variable..name~y..dref~8..arity~0..args~[])]..accafter~[plural_dref(6, [7, 8]), math_id(7, type~variable..name~x..dref~7..arity~0..args~[]), math_id(8, type~variable..name~y..dref~8..arity~0..args~[]), math_id(9, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~7..arity~0..args~[], type~variable..name~y..dref~8..arity~0..args~[]])])]..rrefs~[]..accbefore~[]..accafter~[])]..rrefs~[]..accbefore~[]..accafter~[].

% Existential topic tests

test('there are x y'):-
	prs:build_prs(PRS,[sentence(1,[there,are,math([x]),',',math([y])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[id~1..drefs~[1, 2, 3]..mrefs~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]].

test('there is x such that'):-
	prs:build_prs(PRS,[sentence(1,[there,is,an,math([x]),such,that,math([x,'*',x,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~function..arity~2..name~mul..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~function..arity~2..name~mul..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~function..arity~2..name~mul..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~x])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~function..arity~2..name~mul..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~x])]..accbefore~[].
	
test('there is an even prime number'):-
	prs:build_prs(PRS,[sentence(1,[there,is,an,even,prime,number])]),
	!,
	PRS = id~0..conds~[id~1..conds~[predicate(1, [even]), predicate(1, [prime]), predicate(1, [number])]..drefs~[1]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[].

test('negated existential'):-
	build_prs(PRS,[sentence(1,[there,is,no,integer])]),
	!,
	PRS = id~0..conds~[id~1..conds~[neg(id~neg(1)..conds~[predicate(1, [integer])]..drefs~[1]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('there is no x such that'):-
	 build_prs(PRS,[sentence(1,[there,is,no,math([x]),such,that,math([x,'*',x,'=',x])])]),
	 PRS = id~0..conds~[id~1..conds~[neg(id~neg(1)..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~function..arity~2..name~mul..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~function..arity~2..name~mul..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~function..arity~2..name~mul..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x], type~variable..arity~0..name~x])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[],
	 !.

% Universal topic tests

test('simple universal topic'):-
	build_prs(PRS,[sentence(1,[for,every,math([x]),math([x]),is,even])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~noun_phrase(1)..conds~[math_id(1, type~variable..arity~0..name~x)]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]=>id~scope(1)..conds~[predicate(1, [even])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('complex universal topic'):-
	build_prs(PRS,[sentence(1,[for,every,even,number,math([x]),there,is,a,math([y]),such,that,math([x,'=','2','*',y])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~noun_phrase(1)..conds~[predicate(1, [even]), predicate(1, [number]), math_id(1, type~variable..arity~0..name~x)]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]=>id~scope(1)..conds~[math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~function..arity~2..name~mul..args~[type~constant..arity~0..name~'2', type~variable..arity~0..name~y]]), holds(3)]..drefs~[2, 3]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~function..arity~2..name~mul..args~[type~constant..arity~0..name~'2', type~variable..arity~0..name~y]]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~function..arity~2..name~mul..args~[type~constant..arity~0..name~'2', type~variable..arity~0..name~y]])]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('very complex universal topic'):-
	build_prs(PRS,[sentence(1,[for,every,set,math([x]),such,that,math([x]),contains,math([x]),there,is,a,math([y]),such,that,math([x,'=',y])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~noun_phrase(1)..conds~[predicate(1, [set]), math_id(1, type~variable..arity~0..name~x), predicate(1, 1, [contain])]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]=>id~scope(1)..conds~[math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]), holds(3)]..drefs~[2, 3]..mrefs~[type~variable..arity~0..name~y, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y), math_id(3, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~y])]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

% Sentence initial tests
test('negative sentence initial'):-
	build_prs(PRS,[sentence(1,[it,is,not,the,case,that,math([x,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[neg(id~neg(1)..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('affirmative sentence initial'):-
	build_prs(PRS,[sentence(1,[it,is,the,case,that,math([x,'=',x])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]), holds(2)]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x]]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~relation..arity~2..name~ (=)..args~[type~variable..arity~0..name~x, type~variable..arity~0..name~x])]..accbefore~[].

% Complex sentence tests
test('complex sentence'):-
	build_prs(PRS,[sentence(1,[no,even,integer,math([x]),such,that,for,all,math([y]),math([x,'*',y]),is,positive,divides,math(['2'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[neg(id~neg(1)..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..name~'2'..type~constant..arity~0)]..conds~[predicate(1, [even]), predicate(1, [integer]), math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), (id~noun_phrase(neg(1))..drefs~[3, 4]..mrefs~[args~[]..dref~4..name~y..type~variable..arity~0]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), plural_dref(3, [4]), math_id(4, args~[]..dref~4..name~y..type~variable..arity~0)]..conds~[plural_dref(3, [4]), math_id(4, args~[]..dref~4..name~y..type~variable..arity~0)])=> (id~scope(neg(1))..drefs~[5]..mrefs~[args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~4..name~y..type~variable..arity~0]..name~mul..type~function..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), plural_dref(3, [4]), math_id(4, args~[]..dref~4..name~y..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), plural_dref(3, [4]), math_id(4, args~[]..dref~4..name~y..type~variable..arity~0), math_id(5, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~4..name~y..type~variable..arity~0]..name~mul..type~function..arity~2)]..conds~[math_id(5, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~4..name~y..type~variable..arity~0]..name~mul..type~function..arity~2), predicate(5, [positive])]), math_id(2, args~[]..name~'2'..type~constant..arity~0), predicate(1, 2, [divide])])]].

test('very complex sentence'):-
	build_prs(PRS,[sentence(1,[every,even,prime,integer,math([x]),such,that,it,is,the,case,that,if,math([x]),divides,math([y]),then,math([y]),is,even,divides,math([y])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~noun_phrase(1)..conds~[predicate(1, [even]), predicate(1, [prime]), predicate(1, [integer]), math_id(1, type~variable..arity~0..name~x), id~prot(noun_phrase(1))..conds~[math_id(2, type~variable..arity~0..name~y),predicate(1, 2, [divide])]..drefs~[2]..mrefs~[type~variable..arity~0..name~y]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y)]..accbefore~[math_id(1, type~variable..arity~0..name~x)]=>id~apod(noun_phrase(1))..conds~[predicate(2, [even])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y)]..accbefore~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~variable..arity~0..name~y)]]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]=>id~verb_phrase(1)..conds~[math_id(3, type~variable..arity~0..name~y),predicate(1, 3, [divide])]..drefs~[3]..mrefs~[type~variable..arity~0..name~y]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(3, type~variable..arity~0..name~y)]..accbefore~[math_id(1, type~variable..arity~0..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

% Noun phrase tests

test('term'):-
	prs:build_prs(PRS,[sentence(1,[math(['2','*',x]),is,even])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~function..args~[type~constant..arity~0..name~'2', type~variable..arity~0..name~x]..arity~2..name~mul), predicate(2, [even])]..drefs~[1, 2]..mrefs~[type~variable..arity~0..name~x, type~function..args~[type~constant..arity~0..name~'2', type~variable..arity~0..name~x]..arity~2..name~mul]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~function..args~[type~constant..arity~0..name~'2', type~variable..arity~0..name~x]..arity~2..name~mul)]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x), math_id(2, type~function..args~[type~constant..arity~0..name~'2', type~variable..arity~0..name~x]..arity~2..name~mul)]..accbefore~[].

test('every'):-
	prs:build_prs(PRS,[sentence(1,[every,number,is,even])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~noun_phrase(1)..conds~[predicate(1, [number])]..drefs~[1]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[]=>id~verb_phrase(1)..conds~[predicate(1, [even])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[1]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('no'):-
	prs:build_prs(PRS,[sentence(1,[no,number,is,even])]),
	!,
	PRS = id~0..conds~[id~1..conds~[neg(id~neg(1)..conds~[predicate(1, [number]), predicate(1, [even])]..drefs~[1]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..accbefore~[].

test('some'):-
	prs:build_prs(PRS,[sentence(1,[some,number,is,even])]),
	!,
	PRS = id~0..conds~[id~1..conds~[predicate(1, [number]), predicate(1, [even])]..drefs~[1]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[1]..accbefore~[].

test('some integers y and z') :-
	build_prs(PRS,[sentence(1,[math([x]),contains,some,integers,math([y]),and,math([z])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2, 3, 4]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), static(id~s1(plural(1))..drefs~[]..mrefs~[]..conds~[predicate(3, [integer])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]), static(id~s2(plural(1))..drefs~[]..mrefs~[]..conds~[predicate(4, [integer])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small), static(id~s1(plural(1))..drefs~[]..mrefs~[]..conds~[predicate(1, 3, [contain])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]), static(id~s2(plural(1))..drefs~[]..mrefs~[]..conds~[predicate(1, 4, [contain])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), plural_dref(2, [3, 4]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~z..dref~4..arity~0..args~[]..alph~latin..cap~small)].

test('subject with "the"'):-
	build_prs(PRS,[sentence(1,[the,even,prime,number,divides,math(['4'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[2,math_id(1, args~[]..name~'4'..type~constant..arity~0)]..conds~[id~1..drefs~[1]..mrefs~[args~[]..name~'4'..type~constant..arity~0]..rrefs~[]..accbefore~[]..accafter~[2,math_id(1, args~[]..name~'4'..type~constant..arity~0)]..conds~[the(2, id~the(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[predicate(2, [even]), predicate(2, [prime]), predicate(2, [number])]), math_id(1, args~[]..name~'4'..type~constant..arity~0), predicate(2, 1, [divide])]].

test('object with "the"'):-
	build_prs(PRS,[sentence(1,[math(['2']),divides,the,even,prime,number])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0),2]..conds~[id~1..drefs~[1]..mrefs~[args~[]..name~'2'..type~constant..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0),2]..conds~[math_id(1, args~[]..name~'2'..type~constant..arity~0), the(2, id~the(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~'2'..type~constant..arity~0)]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0)]..conds~[predicate(2, [even]), predicate(2, [prime]), predicate(2, [number])]), predicate(1, 2, [divide])]].

test('the set of natural numbers'):-
	build_prs(PRS,[sentence(1,[the,set,of,natural,numbers,is,infinite])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[the(1, id~the(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[predicate(1, [set]), (id~left(the(1))..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[2]..conds~[predicate(2, [natural,number])]<=>id~right(the(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[2]..accafter~[2]..conds~[predicate(2, 1, [in])])]), predicate(1, [infinite])]].

test('"the" with such that clause using variable introduced before "the"'):-
	build_prs(PRS,[sentence(1,['let',math(['M']),'be','the','line','such','that',math([a]),'and',math([b]),'are','on',math(['M'])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..conds~[accbefore~[]..id~1..drefs~[1]..mrefs~[args~[]..dref~1..name~'M'..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2]..conds~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), the(2, accbefore~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0)]..id~the(1)..drefs~[3, 4, 5]..mrefs~[args~[]..dref~1..name~'M'..type~variable..arity~0, args~[]..dref~3..name~a..type~variable..arity~0, args~[]..dref~4..name~b..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(2, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(3, args~[]..dref~3..name~a..type~variable..arity~0), math_id(4, args~[]..dref~4..name~b..type~variable..arity~0), plural_dref(5, [3, 4])]..conds~[predicate(2, [line]), math_id(2, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(3, args~[]..dref~3..name~a..type~variable..arity~0), math_id(4, args~[]..dref~4..name~b..type~variable..arity~0), plural_dref(5, [3, 4]), static(accbefore~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(2, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(3, args~[]..dref~3..name~a..type~variable..arity~0), math_id(4, args~[]..dref~4..name~b..type~variable..arity~0), plural_dref(5, [3, 4])]..id~s1(plural(the(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(2, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(3, args~[]..dref~3..name~a..type~variable..arity~0), math_id(4, args~[]..dref~4..name~b..type~variable..arity~0), plural_dref(5, [3, 4])]..conds~[predicate(3, 2, [on])]), static(accbefore~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(2, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(3, args~[]..dref~3..name~a..type~variable..arity~0), math_id(4, args~[]..dref~4..name~b..type~variable..arity~0), plural_dref(5, [3, 4])]..id~s2(plural(the(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(2, args~[]..dref~1..name~'M'..type~variable..arity~0), math_id(3, args~[]..dref~3..name~a..type~variable..arity~0), math_id(4, args~[]..dref~4..name~b..type~variable..arity~0), plural_dref(5, [3, 4])]..conds~[predicate(4, 2, [on])])]), predicate(1, 2, [=])]==>accbefore~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2]..id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2]..conds~[]].

test('a set of natural numbers'):-
	build_prs(PRS,[sentence(1,[let,math(['M']),be,a,set,of,natural,numbers])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~'M'..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2]..conds~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), predicate(2, [set]), id~left(1)..drefs~[3]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2, 3]..conds~[predicate(3, [natural,number])]<=id~right(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2, 3]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2, 3]..conds~[predicate(3, 2, [in])], predicate(1, 2, [=])]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2]..accafter~[math_id(1, args~[]..dref~1..name~'M'..type~variable..arity~0), 2]..conds~[]].

test('the set of x such that'):-
	build_prs(PRS,[sentence(1,[the,set,of,math([x]),such,that,math([x,+,x,=,x]),is,infinite])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[the(1, id~the(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[predicate(1, [set]), id~left(the(1))..drefs~[2, 3]..mrefs~[args~[]..name~x..type~variable..dref~2..arity~0, args~[args~[args~[]..name~x..type~variable..dref~2..arity~0, args~[]..name~x..type~variable..dref~2..arity~0]..name~plus..type~function..arity~2, args~[]..name~x..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(2, args~[]..name~x..type~variable..dref~2..arity~0), math_id(3, args~[args~[args~[]..name~x..type~variable..dref~2..arity~0, args~[]..name~x..type~variable..dref~2..arity~0]..name~plus..type~function..arity~2, args~[]..name~x..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(2, args~[]..name~x..type~variable..dref~2..arity~0), math_id(3, args~[args~[args~[]..name~x..type~variable..dref~2..arity~0, args~[]..name~x..type~variable..dref~2..arity~0]..name~plus..type~function..arity~2, args~[]..name~x..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2), holds(3)]<=>id~right(the(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..name~x..type~variable..dref~2..arity~0), math_id(3, args~[args~[args~[]..name~x..type~variable..dref~2..arity~0, args~[]..name~x..type~variable..dref~2..arity~0]..name~plus..type~function..arity~2, args~[]..name~x..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(2, args~[]..name~x..type~variable..dref~2..arity~0), math_id(3, args~[args~[args~[]..name~x..type~variable..dref~2..arity~0, args~[]..name~x..type~variable..dref~2..arity~0]..name~plus..type~function..arity~2, args~[]..name~x..type~variable..dref~2..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[predicate(2, 1, [in])]]), predicate(1, [infinite])]].

test('"set" with variable but without collection complement'):-
	build_prs(PRS,[sentence(1,[some,set,math([x]),is,infinite])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[id~1..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [set]), math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), predicate(1, [infinite])]].

test('such-that clause'):-
	prs:build_prs(PRS,[sentence(1,[every,number,math([x]),such,that,math([x]),is,not,even,is,odd])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~noun_phrase(1)..conds~[predicate(1, [number]), math_id(1, type~variable..arity~0..args~[]..name~x), neg(id~neg(noun_phrase(1))..conds~[predicate(1, [even])]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)])]..drefs~[1]..mrefs~[type~variable..arity~0..args~[]..name~x]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)]=>id~verb_phrase(1)..conds~[predicate(1, [odd])]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[].

test('complex such-that-clauses'):-
	build_prs(PRS,[sentence(1,['for','all','points',math([a,',',b]),'such','that',math([a,'\neq',b]),',','there','is','a','circle',math(['\alpha']),'such','that',math([a]),'contains',math(['\alpha']),'and',math([b]),'is','on',math(['\alpha'])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..conds~[accbefore~[]..id~1..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..conds~[accbefore~[]..id~noun_phrase(1)..drefs~[1, 2, 3, 4]..mrefs~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..conds~[plural_dref(1, [2, 3]), static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..id~s1(plural(noun_phrase(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..conds~[predicate(2, [point])]), static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..id~s2(plural(noun_phrase(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..conds~[predicate(3, [point])]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), holds(4)]=>accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..id~scope(1)..drefs~[5]..mrefs~[args~[]..dref~5..name~alpha..type~variable..arity~0]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), math_id(5, args~[]..dref~5..name~alpha..type~variable..arity~0)]..conds~[predicate(5, [circle]), math_id(5, args~[]..dref~5..name~alpha..type~variable..arity~0), accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), math_id(5, args~[]..dref~5..name~alpha..type~variable..arity~0)]..id~conjunct1(scope(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), math_id(5, args~[]..dref~5..name~alpha..type~variable..arity~0)]..conds~[predicate(2, 5, [contain])], accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), math_id(5, args~[]..dref~5..name~alpha..type~variable..arity~0)]..id~conjunct2(scope(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), math_id(5, args~[]..dref~5..name~alpha..type~variable..arity~0)]..conds~[predicate(3, 5, [on])]]]].

test('such-that-clause with if-then-construction'):-
	build_prs(PRS,[sentence(1,['there','is','an',math([x]),'such','that','if',math([x,=,y]),'then',math([y,=,y])])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), id~prot(1)..conds~[math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), holds(3)]..drefs~[2, 3]..mrefs~[args~[]..name~y..type~variable..arity~0..dref~2, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2)]=>id~apod(1)..conds~[math_id(4, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), holds(4)]..drefs~[4]..mrefs~[args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1), math_id(2, args~[]..name~y..type~variable..arity~0..dref~2), math_id(3, args~[args~[]..name~x..type~variable..arity~0..dref~1, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2), math_id(4, args~[args~[]..name~y..type~variable..arity~0..dref~2, args~[]..name~y..type~variable..arity~0..dref~2]..name~ (=)..type~relation..arity~2)]]..drefs~[1]..mrefs~[args~[]..name~x..type~variable..arity~0..dref~1]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~x..type~variable..arity~0..dref~1)].	

test('such-that-clause directly after noun'):-
	build_prs(PRS,[sentence(1,['let',math([b]),'be','a','point','such','that',math([a,'\neq',b])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1, 2, 3, 4]..mrefs~[args~[]..name~b..type~variable..dref~1..arity~0, args~[]..name~a..type~variable..dref~3..arity~0, args~[args~[]..name~a..type~variable..dref~3..arity~0, args~[]..name~b..type~variable..dref~1..arity~0]..name~ ~= .. type~relation..arity~2]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..name~b..type~variable..dref~1..arity~0), 2, math_id(3, args~[]..name~a..type~variable..dref~3..arity~0), math_id(4, args~[args~[]..name~a..type~variable..dref~3..arity~0, args~[]..name~b..type~variable..dref~1..arity~0]..name~ ~= .. type~relation..arity~2)]..conds~[math_id(1, args~[]..name~b..type~variable..dref~1..arity~0), predicate(2, [point]), math_id(3, args~[]..name~a..type~variable..dref~3..arity~0), math_id(4, args~[args~[]..name~a..type~variable..dref~3..arity~0, args~[]..name~b..type~variable..dref~1..arity~0]..name~ ~= .. type~relation..arity~2), holds(4), predicate(1, 2, [=])]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..name~b..type~variable..dref~1..arity~0), 2, math_id(3, args~[]..name~a..type~variable..dref~3..arity~0), math_id(4, args~[args~[]..name~a..type~variable..dref~3..arity~0, args~[]..name~b..type~variable..dref~1..arity~0]..name~ ~= .. type~relation..arity~2)]..accafter~[math_id(1, args~[]..name~b..type~variable..dref~1..arity~0), 2, math_id(3, args~[]..name~a..type~variable..dref~3..arity~0), math_id(4, args~[args~[]..name~a..type~variable..dref~3..arity~0, args~[]..name~b..type~variable..dref~1..arity~0]..name~ ~= .. type~relation..arity~2)]..conds~[]].

test('such-that clause after NP coordination'):-
	build_prs(PRS,[sentence(1,[math([a]),'and',math([b]),'are','points','such','that',math([a,'\neq',b])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3, 4]..mrefs~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..id~s1(plural(1))..drefs~[5]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), 5]..conds~[predicate(5, [point]), predicate(1, 5, [=])]), static(accbefore~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2)]..id~s2(plural(1))..drefs~[6]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), 6]..conds~[predicate(6, [point]), predicate(2, 6, [=])]), math_id(4, args~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..name~ ~= .. type~relation..arity~2), holds(4)]].

test('all'):-
	prs:build_prs(PRS,[sentence(1,[all,integers,are,even])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~noun_phrase(1)..drefs~[1]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[static(id~plural(noun_phrase(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[predicate(1, [integer])])]=>id~verb_phrase(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[static(id~plural(verb_phrase(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[predicate(1, [even])])]]].

test('plural predicative') :-
	build_prs(PRS,[sentence(1,['all','integers',math([x]),',',math([y]),'are','numbers'])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..conds~[accbefore~[]..id~1..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..conds~[accbefore~[]..id~noun_phrase(1)..drefs~[1, 2, 3]..mrefs~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[plural_dref(1, [2, 3]), static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..id~s1(plural(noun_phrase(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[predicate(2, [integer])]), static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..id~s2(plural(noun_phrase(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[predicate(3, [integer])]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]=>accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..id~verb_phrase(1)..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..id~s1(plural(verb_phrase(1)))..drefs~[4]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), 4]..conds~[predicate(4, [number]), predicate(2, 4, [=])]), static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..id~s2(plural(verb_phrase(1)))..drefs~[5]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), 5]..conds~[predicate(5, [number]), predicate(3, 5, [=])])]]].

test('integers a,b'):-
	build_prs(PRS,[sentence(1, [there, are, integers, math([a, (,), b]), such, that, math([a, ^, '2', =, '2', *, b, ^, '2']), and, math([gcd, '(', a, (,), b, ')', =, '1'])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2, args~[args~[]..name~'2'..type~constant..arity~0, args~[args~[]..dref~3..name~b..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2), math_id(5, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~gcd..type~function, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3]..mrefs~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2, args~[args~[]..name~'2'..type~constant..arity~0, args~[args~[]..dref~3..name~b..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2), math_id(5, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~gcd..type~function, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[plural_dref(1, [2, 3]), static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0)]..id~s1(plural(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0)]..conds~[predicate(2, [integer])]), static(accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0)]..id~s2(plural(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0)]..conds~[predicate(3, [integer])]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0)]..id~conjunct1(plural(1))..drefs~[4]..mrefs~[args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2, args~[args~[]..name~'2'..type~constant..arity~0, args~[args~[]..dref~3..name~b..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2, args~[args~[]..name~'2'..type~constant..arity~0, args~[args~[]..dref~3..name~b..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2, args~[args~[]..name~'2'..type~constant..arity~0, args~[args~[]..dref~3..name~b..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2), holds(4)], accbefore~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2, args~[args~[]..name~'2'..type~constant..arity~0, args~[args~[]..dref~3..name~b..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2)]..id~conjunct2(plural(1))..drefs~[5]..mrefs~[args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~gcd..type~function, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, args~[]..dref~2..name~a..type~variable..arity~0), math_id(3, args~[]..dref~3..name~b..type~variable..arity~0), math_id(4, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2, args~[args~[]..name~'2'..type~constant..arity~0, args~[args~[]..dref~3..name~b..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~exp..type~function..arity~2]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2), math_id(5, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~gcd..type~function, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(5, args~[args~[args~[]..dref~2..name~a..type~variable..arity~0, args~[]..dref~3..name~b..type~variable..arity~0]..name~gcd..type~function, args~[]..name~'1'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(5)]]].

test('2 and 3 are prime numbers'):-
	build_prs(PRS,[sentence(1, [math(['2']), and, math(['3']), are, prime, numbers])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3]..mrefs~[args~[]..name~'2'..type~constant..arity~0, args~[]..name~'3'..type~constant..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..conds~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..id~s1(plural(1))..drefs~[4]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2]), 4]..conds~[predicate(4, [prime]), predicate(4, [number]), predicate(1, 4, [=])]), static(accbefore~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..id~s2(plural(1))..drefs~[5]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2]), 5]..conds~[predicate(5, [prime]), predicate(5, [number]), predicate(2, 5, [=])])]].

test('2 and 3 divide some odd number') :-
    build_prs(PRS,[sentence(1, [math(['2']), and, math(['3']), divide,some,odd,number])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3]..mrefs~[args~[]..name~'2'..type~constant..arity~0, args~[]..name~'3'..type~constant..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..conds~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..id~s1(plural(1))..drefs~[4]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2]), 4]..conds~[predicate(4, [odd]), predicate(4, [number]), predicate(1, 4, [divide])]), static(accbefore~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2])]..id~s2(plural(1))..drefs~[5]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..name~'2'..type~constant..arity~0), math_id(2, args~[]..name~'3'..type~constant..arity~0), plural_dref(3, [1, 2]), 5]..conds~[predicate(5, [odd]), predicate(5, [number]), predicate(2, 5, [divide])])]].

test('complex plural dissolution') :-
	build_prs(PRS,[sentence(1,[math([x]),'and',math([y]),'are','integers','such','that',math([x,+,y]),'divides','some','odd','prime','number'])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2), 5]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3, 4, 5]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2), 5]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2), 5]..id~s1(plural(1))..drefs~[6]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2), 5, 6]..conds~[predicate(6, [integer]), predicate(1, 6, [=])]), static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2), 5]..id~s2(plural(1))..drefs~[7]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2), 5, 7]..conds~[predicate(7, [integer]), predicate(2, 7, [=])]), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..name~plus..type~function..arity~2), predicate(5, [odd]), predicate(5, [prime]), predicate(5, [number]), predicate(4, 5, [divide])]].

test('a and b do not contain x') :-
	build_prs(PRS,[sentence(1,[math([a]),'and',math([b]),'do','not',contain,math(['x'])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3]..mrefs~[args~[]..dref~1..name~a..type~variable..arity~0, args~[]..dref~2..name~b..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..id~s1(plural(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[neg(accbefore~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..id~s1(neg(plural(1)))..drefs~[4]..mrefs~[args~[]..dref~4..name~x..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[]..dref~4..name~x..type~variable..arity~0)]..conds~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0), predicate(1, 4, [contain])])]), static(accbefore~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..id~s2(plural(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[neg(accbefore~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2])]..id~s2(neg(plural(1)))..drefs~[5]..mrefs~[args~[]..dref~5..name~x..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~a..type~variable..arity~0), math_id(2, args~[]..dref~2..name~b..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(5, args~[]..dref~5..name~x..type~variable..arity~0)]..conds~[math_id(5, args~[]..dref~5..name~x..type~variable..arity~0), predicate(2, 5, [contain])])])]].

test('2nd complex plural dissolution') :-
	build_prs(PRS,[sentence(1,[math([x]),'and',math([y]),'are','prime','numbers',math([p]),'such','that','some','odd','prime','number',math([q]),'divides',math([p,+,'1'])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2])]..id~s1(plural(1))..drefs~[4, 5, 6]..mrefs~[args~[]..dref~4..name~p..type~variable..arity~0, args~[]..dref~5..name~q..type~variable..arity~0, args~[args~[]..dref~4..name~p..type~variable..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~plus..type~function..arity~2]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[]..dref~4..name~p..type~variable..arity~0), math_id(5, args~[]..dref~5..name~q..type~variable..arity~0), math_id(6, args~[args~[]..dref~4..name~p..type~variable..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~plus..type~function..arity~2)]..conds~[predicate(4, [prime]), predicate(4, [number]), math_id(4, args~[]..dref~4..name~p..type~variable..arity~0), predicate(5, [odd]), predicate(5, [prime]), predicate(5, [number]), math_id(5, args~[]..dref~5..name~q..type~variable..arity~0), math_id(6, args~[args~[]..dref~4..name~p..type~variable..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~plus..type~function..arity~2), predicate(5, 6, [divide]), predicate(1, 4, [=])]), static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2])]..id~s2(plural(1))..drefs~[7, 8, 9]..mrefs~[args~[]..dref~7..name~p..type~variable..arity~0, args~[]..dref~8..name~q..type~variable..arity~0, args~[args~[]..dref~7..name~p..type~variable..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~plus..type~function..arity~2]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(7, args~[]..dref~7..name~p..type~variable..arity~0), math_id(8, args~[]..dref~8..name~q..type~variable..arity~0), math_id(9, args~[args~[]..dref~7..name~p..type~variable..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~plus..type~function..arity~2)]..conds~[predicate(7, [prime]), predicate(7, [number]), math_id(7, args~[]..dref~7..name~p..type~variable..arity~0), predicate(8, [odd]), predicate(8, [prime]), predicate(8, [number]), math_id(8, args~[]..dref~8..name~q..type~variable..arity~0), math_id(9, args~[args~[]..dref~7..name~p..type~variable..arity~0, args~[]..name~'1'..type~constant..arity~0]..name~plus..type~function..arity~2), predicate(8, 9, [divide]), predicate(2, 7, [=])])]].

test('former plural bug') :-
	build_prs(PRS,[sentence(1,[math(['L']),'and',math(['M']),are,lines,such,that,math(['L']),'and',math(['M']),'are','points'])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2])]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3, 4]..mrefs~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2])]..conds~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2])]..id~s1(plural(1))..drefs~[5]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2]), 5]..conds~[predicate(5, [line]), predicate(1, 5, [=])]), static(accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2])]..id~s2(plural(1))..drefs~[6]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2]), 6]..conds~[predicate(6, [line]), predicate(2, 6, [=])]), plural_dref(4, [1, 2]), static(accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2])]..id~s1(plural(plural(1)))..drefs~[7]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2]), 7]..conds~[predicate(7, [point]), predicate(1, 7, [=])]), static(accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2])]..id~s2(plural(plural(1)))..drefs~[8]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), plural_dref(4, [1, 2]), 8]..conds~[predicate(8, [point]), predicate(2, 8, [=])])]].

test('simple NP conjunction'):-
	prs:build_prs(PRS,[sentence(1,[all,integers,and,all,numbers,are,even])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~noun_phrase(1)..drefs~[1]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[static(id~plural(noun_phrase(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[predicate(1, [integer])])]=>id~verb_phrase(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[static(id~plural(verb_phrase(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[predicate(1, [even])])], id~noun_phrase(and(1))..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[2]..conds~[static(id~plural(noun_phrase(and(1)))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[2]..accafter~[2]..conds~[predicate(2, [number])])]=>id~verb_phrase(and(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[2]..accafter~[2]..conds~[static(id~plural(verb_phrase(and(1)))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[2]..accafter~[2]..conds~[predicate(2, [even])])]]].

test('simple NP disjunction'):-
	prs:build_prs(PRS,[sentence(1,[math([x]),or,some,prime,number,math([y]),is,even])]),
	!,
	PRS = id~0..conds~[id~1..conds~[id~disjunct1(1)..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), predicate(1, [even])]..drefs~[1]..mrefs~[type~variable..arity~0..args~[]..name~x]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)]v id~disjunct2(1)..conds~[predicate(2, [prime]), predicate(2, [number]), math_id(2, type~variable..arity~0..args~[]..name~y), predicate(2, [even])]..drefs~[2]..mrefs~[type~variable..arity~0..args~[]..name~y]..rrefs~[]..accbefore~[]..accafter~[math_id(2, type~variable..arity~0..args~[]..name~y)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[].

test('NP coordination in subject and object'):-
	build_prs(PRS,[sentence(1,[fix,math([x]),math([y])]),sentence(2,[math([x]),',',math([y,+,x]),and,math([y,*,x]),divide,math([x]),or,math([y])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[ (id~1..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]..conds~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])])==> (id~conseq(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[4, 5, 6]..mrefs~[type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]], type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]]..conds~[math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5]), static(id~s1(plural(2))..drefs~[]..mrefs~[]..conds~[ (id~s1(disjunct1(plural(2)))..drefs~[]..mrefs~[]..conds~[predicate(2, 2, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])v (id~s1(disjunct2(plural(2)))..drefs~[]..mrefs~[]..conds~[predicate(2, 3, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]), static(id~s2(plural(2))..drefs~[]..mrefs~[]..conds~[ (id~s2(disjunct1(plural(2)))..drefs~[]..mrefs~[]..conds~[predicate(4, 2, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])v (id~s2(disjunct2(plural(2)))..drefs~[]..mrefs~[]..conds~[predicate(4, 3, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]), static(id~s3(plural(2))..drefs~[]..mrefs~[]..conds~[ (id~s3(disjunct1(plural(2)))..drefs~[]..mrefs~[]..conds~[predicate(5, 2, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])v (id~s3(disjunct2(plural(2)))..drefs~[]..mrefs~[]..conds~[predicate(5, 3, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])]]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~function..name~plus..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), math_id(5, type~function..name~mul..arity~2..args~[type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~x..dref~2..arity~0..args~[]]), plural_dref(6, [2, 4, 5])])]..rrefs~[]..accbefore~[]..accafter~[].

test('x and y divide a and b') :-
	build_prs(PRS,[sentence(1,[fix,math([x]),',',math([y]),',',math([a]),',',math([b])]),sentence(2,[math(['x']),'and',math(['y']),divide,math(['a']),'and',math(['b'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[ (id~1..drefs~[1, 2, 3, 4, 5]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[], type~variable..name~a..dref~4..arity~0..args~[], type~variable..name~b..dref~5..arity~0..args~[]]..conds~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[])])==> (id~conseq(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[6]..mrefs~[]..conds~[plural_dref(6, [2, 3]), static(id~s1(plural(2))..drefs~[7]..mrefs~[]..conds~[plural_dref(7, [4, 5]), static(id~s1(s1(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(2, 4, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(7, [4, 5])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(7, [4, 5])]), static(id~s1(s2(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(2, 5, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(7, [4, 5])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(7, [4, 5])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(7, [4, 5])]), static(id~s2(plural(2))..drefs~[8]..mrefs~[]..conds~[plural_dref(8, [4, 5]), static(id~s2(s1(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(3, 4, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(8, [4, 5])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(8, [4, 5])]), static(id~s2(s2(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(3, 5, [divide])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(8, [4, 5])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(8, [4, 5])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3]), plural_dref(8, [4, 5])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3])]]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), math_id(4, type~variable..name~a..dref~4..arity~0..args~[]), math_id(5, type~variable..name~b..dref~5..arity~0..args~[]), plural_dref(6, [2, 3])])]..rrefs~[]..accbefore~[]..accafter~[].

test('Complex NP disjunction'):-
	build_prs(PRS,[sentence(1,[math([x]),contains,all,prime,numbers,or,no,integers,or,some,math([y]),such,that,math([y,+,y,=,y])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[accbefore~[]..id~1..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..id~disjunct1(1)..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..id~noun_phrase(disjunct1(1))..drefs~[2]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..id~plural(noun_phrase(disjunct1(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[predicate(2, [prime]), predicate(2, [number])])]=>accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..id~verb_phrase(disjunct1(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..id~plural(verb_phrase(disjunct1(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[predicate(1, 2, [contain])])]]v accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..id~disjunct2(1)..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..id~disjunct1(disjunct2(1))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[neg(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..id~neg(disjunct1(disjunct2(1)))..drefs~[3]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..conds~[static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..id~plural(neg(disjunct1(disjunct2(1))))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..conds~[predicate(3, [integer])]), static(accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..id~plural(neg(disjunct1(disjunct2(1))))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 3]..conds~[predicate(1, 3, [contain])])])]v accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..id~disjunct2(disjunct2(1))..drefs~[4, 5]..mrefs~[args~[]..dref~4..name~y..type~variable..arity~0, args~[args~[args~[]..dref~4..name~y..type~variable..arity~0, args~[]..dref~4..name~y..type~variable..arity~0]..name~plus..type~function..arity~2, args~[]..dref~4..name~y..type~variable..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(4, args~[]..dref~4..name~y..type~variable..arity~0), math_id(5, args~[args~[args~[]..dref~4..name~y..type~variable..arity~0, args~[]..dref~4..name~y..type~variable..arity~0]..name~plus..type~function..arity~2, args~[]..dref~4..name~y..type~variable..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[]..dref~4..name~y..type~variable..arity~0), math_id(5, args~[args~[args~[]..dref~4..name~y..type~variable..arity~0, args~[]..dref~4..name~y..type~variable..arity~0]..name~plus..type~function..arity~2, args~[]..dref~4..name~y..type~variable..arity~0]..name~ (=)..type~relation..arity~2), holds(5), predicate(1, 4, [contain])]]]].

% Transitive adjectives

test('x is distinct from y') :-
	build_prs(PRS,[sentence(1,[math([x]),is,distinct,from,math([y])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0)]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), predicate(1, 2, [distinct])]].

test('x and y are distinct') :-
	build_prs(PRS,[sentence(1,[math([x]),and,math([y]),are,distinct])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[id~1..drefs~[1, 2, 3]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..dref~2..name~y..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2])]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[]..dref~2..name~y..type~variable..arity~0), plural_dref(3, [1, 2]), predicate(1, 2, [distinct])]].

test('all prime numbers are coprime') :-
	build_prs(PRS,[sentence(1,[all,prime,numbers,are,coprime])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..conds~[accbefore~[]..id~1..drefs~[]..mrefs~[]..rrefs~[]..accafter~[]..conds~[accbefore~[]..id~noun_phrase(1)..drefs~[1, 2]..mrefs~[]..rrefs~[]..accafter~[1, 2]..conds~[static(accbefore~[1, 2]..id~s1(plural(noun_phrase(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[1, 2]..conds~[predicate(1, [prime]), predicate(1, [number])]), static(accbefore~[1, 2]..id~s2(plural(noun_phrase(1)))..drefs~[]..mrefs~[]..rrefs~[]..accafter~[1, 2]..conds~[predicate(2, [prime]), predicate(2, [number])]), predicate(2, 1, [distinct])]=>accbefore~[1, 2]..id~verb_phrase(1)..drefs~[]..mrefs~[]..rrefs~[]..accafter~[1, 2]..conds~[predicate(1, 2, [coprime])]]].

test('some numbers in x and y are coprime') :-
	build_prs(PRS,[
	sentence(1,['fix',math([x]),',',math([y])]),
	sentence(2,['some','numbers','in',math([x]),'and',math([y]),'are','coprime'])
	]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2, 3]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]..conds~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]==>id~conseq(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[4, 5]..mrefs~[]..conds~[static(id~s1(plural(2))..drefs~[6]..mrefs~[]..conds~[predicate(4, [number]), plural_dref(6, [2, 3]), static(id~s1(s1(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(4, 2, [in])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(6, [2, 3])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(6, [2, 3])]), static(id~s1(s2(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(4, 3, [in])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(6, [2, 3])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(6, [2, 3])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(6, [2, 3])]), static(id~s2(plural(2))..drefs~[7]..mrefs~[]..conds~[predicate(5, [number]), plural_dref(7, [2, 3]), static(id~s2(s1(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(5, 2, [in])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(7, [2, 3])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(7, [2, 3])]), static(id~s2(s2(plural(plural(2))))..drefs~[]..mrefs~[]..conds~[predicate(5, 3, [in])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(7, [2, 3])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(7, [2, 3])])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5, plural_dref(7, [2, 3])]), predicate(5, 4, [distinct]), predicate(4, 5, [coprime])]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5]]..rrefs~[]..accbefore~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[])]..accafter~[plural_dref(1, [2, 3]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), 4, 5]]..rrefs~[]..accbefore~[]..accafter~[].

test('complex sentence with collective transitive adjectives') :-
	build_prs(PRS,[sentence(1,[math(['L']),'and',math(['M']),'are','distinct','parallel','lines','such','that',math(['\angle','(','L',',','M',')',=,'\perp'])])]),
	!,
	PRS = accbefore~[]..id~0..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[accbefore~[]..id~1..drefs~[1, 2, 3, 4]..mrefs~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), static(accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..id~s1(plural(1))..drefs~[5]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2), 5]..conds~[predicate(5, [line]), predicate(1, 5, [=])]), static(accbefore~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..id~s2(plural(1))..drefs~[6]..mrefs~[]..rrefs~[]..accafter~[math_id(1, args~[]..dref~1..name~'L'..type~variable..arity~0), math_id(2, args~[]..dref~2..name~'M'..type~variable..arity~0), plural_dref(3, [1, 2]), math_id(4, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2), 6]..conds~[predicate(6, [line]), predicate(2, 6, [=])]), predicate(1, 2, [distinct]), predicate(1, 2, [parallel]), math_id(4, args~[args~[args~[]..dref~1..name~'L'..type~variable..arity~0, args~[]..dref~2..name~'M'..type~variable..arity~0]..name~angle..type~function, args~[]..name~perp..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(4)]].

test('very complex sentence with collective transitive adjectives') :-
	build_prs(PRS,[sentence(1,['let',math(['L','_','1']),',',math(['L','_','2']),',',math(['M','_','1']),'and',math(['M','_','2']),'be','distinct','lines','such','that',math(['L','_','1']),'and',math(['L','_','2']),'are','parallel','and',math(['M','_','1']),'and',math(['M','_','2']),'are','not','parallel'])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2, 3, 4, 5]..mrefs~[type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap]..conds~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), static(id~s1(plural(1))..drefs~[6]..mrefs~[]..conds~[predicate(6, [line]), predicate(1, 6, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), 6]), static(id~s2(plural(1))..drefs~[7]..mrefs~[]..conds~[predicate(7, [line]), predicate(2, 7, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), 7]), static(id~s3(plural(1))..drefs~[8]..mrefs~[]..conds~[predicate(8, [line]), predicate(3, 8, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), 8]), static(id~s4(plural(1))..drefs~[9]..mrefs~[]..conds~[predicate(9, [line]), predicate(4, 9, [=])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), 9]), predicate(1, 2, [distinct]), predicate(1, 3, [distinct]), predicate(1, 4, [distinct]), predicate(2, 3, [distinct]), predicate(2, 4, [distinct]), predicate(3, 4, [distinct]), id~conjunct1(plural(1))..drefs~[10]..mrefs~[]..conds~[plural_dref(10, [1, 2]), predicate(1, 2, [parallel])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2])], id~conjunct2(plural(1))..drefs~[11]..mrefs~[]..conds~[plural_dref(11, [3, 4]), neg(id~neg(plural(conjunct2(plural(1))))..drefs~[]..mrefs~[]..conds~[predicate(3, 4, [parallel])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2]), plural_dref(11, [3, 4])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2]), plural_dref(11, [3, 4])])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2]), plural_dref(11, [3, 4])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2]), plural_dref(11, [3, 4])]==>id~conseq(1)..drefs~[]..mrefs~[]..conds~[]..rrefs~[]..accbefore~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2]), plural_dref(11, [3, 4])]..accafter~[math_id(1, type~variable..name~'L1'..dref~1..arity~0..args~[]..alph~latin..cap~cap), math_id(2, type~variable..name~'L2'..dref~2..arity~0..args~[]..alph~latin..cap~cap), math_id(3, type~variable..name~'M1'..dref~3..arity~0..args~[]..alph~latin..cap~cap), math_id(4, type~variable..name~'M2'..dref~4..arity~0..args~[]..alph~latin..cap~cap), plural_dref(5, [1, 2, 3, 4]), plural_dref(10, [1, 2]), plural_dref(11, [3, 4])]]..rrefs~[]..accbefore~[]..accafter~[].
% Prepositional phrase tests

test('predicative pp'):-
	build_prs(PRS,[sentence(1,[math([x]),is,on,math(['L'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~'L'..dref~2..arity~0..args~[]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~'L'..dref~2..arity~0..args~[]), predicate(1, 2, [on])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~'L'..dref~2..arity~0..args~[])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~'L'..dref~2..arity~0..args~[])].

test('predicative pp with alternative copula'):-
    build_prs(PRS,[sentence(1,[math([x]),lies,on,math(['L'])])]),
    !,
    PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~'L'..dref~2..arity~0..args~[]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~'L'..dref~2..arity~0..args~[]), predicate(1, 2, [on])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~'L'..dref~2..arity~0..args~[])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~'L'..dref~2..arity~0..args~[])]. 

test('negated pp') :-
	build_prs(PRS,[sentence(1,[math([a]),is,a,point,not,on,math(['L'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2]..mrefs~[type~variable..name~a..dref~1..arity~0..args~[]]..conds~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), predicate(2, [point]), neg(id~neg(1)..drefs~[3]..mrefs~[type~variable..name~'L'..dref~3..arity~0..args~[]]..conds~[math_id(3, type~variable..name~'L'..dref~3..arity~0..args~[]), predicate(2, 3, [on])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), 2]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), 2, math_id(3, type~variable..name~'L'..dref~3..arity~0..args~[])]), predicate(1, 2, [=])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), 2]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~a..dref~1..arity~0..args~[]), 2].

test('x is between y and z'):-
	build_prs(PRS,[sentence(1,[math([x]),is,between,math([y]),and,math([z])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2, 3, 4]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[], type~variable..name~y..dref~2..arity~0..args~[], type~variable..name~z..dref~3..arity~0..args~[]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), math_id(3, type~variable..name~z..dref~3..arity~0..args~[]), plural_dref(4, [2, 3]), predicate(1, 2, 3, [between])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), math_id(3, type~variable..name~z..dref~3..arity~0..args~[]), plural_dref(4, [2, 3])]]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]), math_id(3, type~variable..name~z..dref~3..arity~0..args~[]), plural_dref(4, [2, 3])].

test('attributive pp'):-
	build_prs(PRS,[sentence(1,[every,line,through,math([x]),intersects,math(['L'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[]..mrefs~[]..conds~[ (id~noun_phrase(1)..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[]]..conds~[predicate(1, [line]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), predicate(1, 2, [through])]..rrefs~[]..accbefore~[]..accafter~[1, math_id(2, type~variable..name~x..dref~2..arity~0..args~[])])=> (id~verb_phrase(1)..drefs~[3]..mrefs~[type~variable..name~'L'..dref~3..arity~0..args~[]]..conds~[math_id(3, type~variable..name~'L'..dref~3..arity~0..args~[]), predicate(1, 3, [intersect])]..rrefs~[]..accbefore~[1, math_id(2, type~variable..name~x..dref~2..arity~0..args~[])]..accafter~[1, math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~'L'..dref~3..arity~0..args~[])])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('attributive between') :-
	build_prs(PRS,[sentence(1,[all,points,between,math([x]),and,math([y]),lie,on,math(['L'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[]..mrefs~[]..conds~[ (id~noun_phrase(1)..drefs~[1]..mrefs~[]..conds~[static(id~plural(noun_phrase(1))..drefs~[2, 3, 4]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[], type~variable..name~y..dref~3..arity~0..args~[]]..conds~[predicate(1, [point]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), plural_dref(4, [2, 3]), predicate(1, 2, 3, [between])]..rrefs~[]..accbefore~[1]..accafter~[1, math_id(2, type~variable..name~x..dref~2..arity~0..args~[]), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]), plural_dref(4, [2, 3])])]..rrefs~[]..accbefore~[]..accafter~[1])=> (id~verb_phrase(1)..drefs~[]..mrefs~[]..conds~[static(id~plural(verb_phrase(1))..drefs~[5]..mrefs~[type~variable..name~'L'..dref~5..arity~0..args~[]]..conds~[math_id(5, type~variable..name~'L'..dref~5..arity~0..args~[]), predicate(1, 5, [on])]..rrefs~[]..accbefore~[1]..accafter~[1, math_id(5, type~variable..name~'L'..dref~5..arity~0..args~[])])]..rrefs~[]..accbefore~[1]..accafter~[1])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

% Verb phrase tests

test('copula with indefinite noun phrase'):-
	build_prs(PRS,[sentence(1,[math([x]),is,an,integer])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), predicate(2, [integer]), predicate(1,2,['='])]..drefs~[1,2]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x),2]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x),2]..accbefore~[].

test('negated transitive verb'):-
	prs:build_prs(PRS,[sentence(1,[math([x]),does,not,divide,a,prime,number])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..args~[]..name~x), neg(id~neg(1)..conds~[predicate(2, [prime]), predicate(2, [number]), predicate(1, 2, [divide])]..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, type~variable..arity~0..args~[]..name~x)]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x),2])]..drefs~[1]..mrefs~[type~variable..arity~0..args~[]..name~x]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)]]..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..arity~0..args~[]..name~x)].

% Object tests

test('universally quantified object'):-
	build_prs(PRS,[sentence(1,[math([x]),divides,every,integer])]),
	!,
	PRS = id~0..conds~[id~1..conds~[math_id(1, type~variable..arity~0..name~x), id~noun_phrase(1)..conds~[predicate(2, [integer])]..drefs~[2]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x),2]..accbefore~[math_id(1, type~variable..arity~0..name~x)]=>id~verb_phrase(1)..conds~[predicate(1, 2, [divide])]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x),2]..accbefore~[math_id(1, type~variable..arity~0..name~x),2]]..drefs~[1]..mrefs~[type~variable..arity~0..name~x]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[]]..drefs~[]..mrefs~[]..rrefs~[]..accafter~[math_id(1, type~variable..arity~0..name~x)]..accbefore~[].

test('negatively quantified object'):-
	build_prs(PRS,[sentence(1,[math([x]),divides,no,integer])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[id~1..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), neg(id~neg(1)..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[predicate(2, [integer]), predicate(1, 2, [divide])])]].

test('universally quantified subject and object'):-
	build_prs(PRS,[sentence(1,[every,class,contains,every,set])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~noun_phrase(1)..drefs~[1]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[predicate(1, [class])]=>id~verb_phrase(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[id~noun_phrase(verb_phrase(1))..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1, 2]..conds~[predicate(2, [set])]=>id~verb_phrase(verb_phrase(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1, 2]..accafter~[1, 2]..conds~[predicate(1, 2, [contain])]]]].

test('some integer does not divide every integer'):-
	build_prs(PRS,[sentence(1,[some,integer,does,not,divide,every,integer])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[id~1..drefs~[1]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[1]..conds~[predicate(1, [integer]), neg(id~neg(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1]..conds~[id~noun_phrase(neg(1))..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[1]..accafter~[1, 2]..conds~[predicate(2, [integer])]=>id~verb_phrase(neg(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[1, 2]..accafter~[1, 2]..conds~[predicate(1, 2, [divide])]])]].

% Variable-type-declaration tests

test('simple variable type declaration') :-
	build_prs(PRS,[
	sentence(1,['small','latin','letters','always','denote','natural','numbers']),
	sentence(2,['for','all',math([x]),',',math([x,succ,=,y,succ]),'implies',math([x,=,y])])
	]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~2..drefs~[]..mrefs~[]..conds~[ (id~noun_phrase(2)..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small]..conds~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small), predicate(2, [natural, number])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small)])=> (id~scope(2)..drefs~[]..mrefs~[]..conds~[ (id~prot(scope(2))..drefs~[3, 4]..mrefs~[type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~succ..args~[type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]]]..conds~[math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), predicate(3, [natural, number]), math_id(4, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~succ..args~[type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]]), holds(4)]..rrefs~[]..accbefore~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~succ..args~[type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]])])=> (id~apod(scope(2))..drefs~[5]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]), holds(5)]..rrefs~[]..accbefore~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~succ..args~[type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]])]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~succ..args~[type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]]), math_id(5, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small])])]..rrefs~[]..accbefore~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~x..dref~2..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('complex variable type declaration') :-
	build_prs(PRS,[
	sentence(1,['for','all',math([y]),',',math([y,succ,=,'\beta',+,'N']),'implies',math([y,=,'N'])]),sentence(2,['small','latin','letters','and','greek','letters','always','denote','natural','numbers']),
	sentence(3,['for','all',math([x]),',',math([x,succ,=,'\alpha',+,'M']),'implies',math([x,=,'M'])])
	]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[]..mrefs~[]..conds~[id~noun_phrase(1)..drefs~[1, 2]..mrefs~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small]..conds~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)]=>id~scope(1)..drefs~[]..mrefs~[]..conds~[id~prot(scope(1))..drefs~[3, 4, 5]..mrefs~[type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap]]]..conds~[math_id(3, type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small), math_id(4, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap), math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap]]), holds(5)]..rrefs~[]..accbefore~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small), math_id(4, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap), math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap]])]=>id~apod(scope(1))..drefs~[6]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap]]..conds~[math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap]), holds(6)]..rrefs~[]..accbefore~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small), math_id(4, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap), math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap]])]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small), math_id(4, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap), math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~beta..dref~3..arity~0..args~[]..alph~greek..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap]]), math_id(6, type~relation..name~ (=)..arity~2..args~[type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small, type~variable..name~N..dref~4..arity~0..args~[]..alph~latin..cap~cap])]]..rrefs~[]..accbefore~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[plural_dref(1, [2]), math_id(2, type~variable..name~y..dref~2..arity~0..args~[]..alph~latin..cap~small)]]..rrefs~[]..accbefore~[]..accafter~[], id~3..drefs~[]..mrefs~[]..conds~[id~noun_phrase(3)..drefs~[7, 8]..mrefs~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small]..conds~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small), predicate(8, [natural, number])]..rrefs~[]..accbefore~[]..accafter~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small)]=>id~scope(3)..drefs~[]..mrefs~[]..conds~[id~prot(scope(3))..drefs~[9, 10, 11]..mrefs~[type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap]]]..conds~[math_id(9, type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small), predicate(9, [natural, number]), math_id(10, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap), math_id(11, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap]]), holds(11)]..rrefs~[]..accbefore~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small)]..accafter~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small), math_id(9, type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small), math_id(10, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap), math_id(11, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap]])]=>id~apod(scope(3))..drefs~[12]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap]]..conds~[math_id(12, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap]), holds(12)]..rrefs~[]..accbefore~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small), math_id(9, type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small), math_id(10, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap), math_id(11, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap]])]..accafter~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small), math_id(9, type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small), math_id(10, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap), math_id(11, type~relation..name~ (=)..arity~2..args~[type~function..name~succ..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small], type~function..name~plus..arity~2..args~[type~variable..name~alpha..dref~9..arity~0..args~[]..alph~greek..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap]]), math_id(12, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small, type~variable..name~M..dref~10..arity~0..args~[]..alph~latin..cap~cap])]]..rrefs~[]..accbefore~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small)]..accafter~[plural_dref(7, [8]), math_id(8, type~variable..name~x..dref~8..arity~0..args~[]..alph~latin..cap~small)]]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

test('biconditional after variable type declaration') :-
	build_prs(PRS,[
	sentence(1,['small','latin','letters','will','stand','throughout','for','natural','numbers']),
	sentence(2,[math([x,=,'1']),'iff',math([x]),'is','even'])
	]),
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~2..drefs~[]..mrefs~[]..conds~[ (id~pullout(2)..drefs~[1]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), predicate(1, [natural, number])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)])=> (id~conditional(2)..drefs~[]..mrefs~[]..conds~[ (id~left_cond(2)..drefs~[2]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]]]..conds~[math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]]), holds(2)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]])])<=> (id~right_cond(2)..drefs~[]..mrefs~[]..conds~[predicate(1, [even])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[]..accbefore~[]..accafter~[]]..rrefs~[]..accbefore~[]..accafter~[].

% Complex text tests

test('two unclosed assumptions'):-
	build_prs(PRS,[sentence(1,[let,math([x]),be,an,integer]),sentence(2,[suppose,that,math([x]),is,even]),sentence(3,[then,there,is,an,integer,math([y]),such,that,math([x,'=','2','*',y])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1, 2]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), predicate(2, [integer]), predicate(1, 2, [=])]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..conds~[predicate(1, [even])]==>id~conseq(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2, math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..name~'2'..type~constant..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2)]..conds~[id~3..drefs~[3, 4]..mrefs~[args~[]..dref~3..name~y..type~variable..arity~0, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..name~'2'..type~constant..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), 2, math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..name~'2'..type~constant..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2)]..conds~[predicate(3, [integer]), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[args~[]..name~'2'..type~constant..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~mul..type~function..arity~2]..name~ (=)..type~relation..arity~2), holds(4)]]]].

test('long closed assumption'):-
	build_prs(PRS,[sentence(1,[suppose,math([x]),is,even,and,math([x]),is,prime]),sentence(2,[then,math([x]),is,not,odd]),sentence(3,[so,math([x,'=','2'])]),sentence(4,[thus,every,even,prime,number,is,an,math([x]),such,that,math([x,'=','2'])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[id~conjunct1(1)..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), predicate(1, [even])], id~conjunct2(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [prime])]]==>id~conseq(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[id~2..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[neg(id~neg(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [odd])])], id~3..drefs~[2]..mrefs~[args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(2, args~[args~[]..dref~1..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(2)]], id~4..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~noun_phrase(4)..drefs~[3]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[3]..conds~[predicate(3, [even]), predicate(3, [prime]), predicate(3, [number])]=>id~verb_phrase(4)..drefs~[4, 5]..mrefs~[args~[]..dref~4..name~x..type~variable..arity~0, args~[args~[]..dref~4..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~ (=)..type~relation..arity~2]..rrefs~[]..accbefore~[3]..accafter~[3, math_id(4, args~[]..dref~4..name~x..type~variable..arity~0), math_id(5, args~[args~[]..dref~4..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~ (=)..type~relation..arity~2)]..conds~[math_id(4, args~[]..dref~4..name~x..type~variable..arity~0), math_id(5, args~[args~[]..dref~4..name~x..type~variable..arity~0, args~[]..name~'2'..type~constant..arity~0]..name~ (=)..type~relation..arity~2), holds(5), predicate(3, 4, [=])]]].

test('definition, assumption, thus'):-
	build_prs(PRS,[sentence(1,[define,math([x]),to,be,even,if,and,only,if,math([x]),is,not,odd]),sentence(2,[assume,math([x]),is,odd]),sentence(3,[then,math([x]),is,not,even]),sentence(4,[thus,every,odd,number,is,not,even])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[1]..mrefs~[args~[]..dref~1..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0), predicate(1, [even])]:=id~definiens(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[neg(id~neg(definiens(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~x..type~variable..arity~0)]..conds~[predicate(1, [odd])])], id~2..drefs~[2]..mrefs~[args~[]..dref~2..name~x..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..conds~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), predicate(2, [odd])]==>id~conseq(2)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..conds~[id~3..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..conds~[neg(id~neg(3)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..accafter~[math_id(2, args~[]..dref~2..name~x..type~variable..arity~0)]..conds~[predicate(2, [even])])]], id~4..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~noun_phrase(4)..drefs~[3]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[3]..conds~[predicate(3, [odd]), predicate(3, [number])]=>id~verb_phrase(4)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[3]..accafter~[3]..conds~[neg(id~neg(verb_phrase(4))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[3]..accafter~[3]..conds~[predicate(3, [even])])]]].

test('long text'):-
	build_prs(PRS,[sentence(1,[axiom,1]),sentence(2,[there,is,a,set,math([u]),such,that,math([u]),contains,no,element]),sentence(3,[lemma]),sentence(4,[for,every,element,math([y]),some,set,does,not,contain,math([y])]),sentence(5,[proof]),sentence(6,[let,math([y]),be,an,element]),sentence(7,[then,by,axiom,1,there,is,a,set,math([x]),such,that,math([x]),contains,no,element]),sentence(8,[then,math([x]),does,not,contain,math([y])]),sentence(9,[so,some,set,does,not,contain,math([y])]),sentence(10,[qed])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~axiom(1)..drefs~[1]..mrefs~[args~[]..dref~1..name~u..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..conds~[predicate(1, [set]), math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), neg(id~neg(axiom(1))..drefs~[2]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), 2]..conds~[predicate(2, [element]), predicate(1, 2, [contain])])]==>id~conseq(axiom(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..conds~[theorem(lemma, id~goal(3)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..conds~[id~4..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..conds~[id~noun_phrase(4)..drefs~[3]..mrefs~[args~[]..dref~3..name~y..type~variable..arity~0]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..conds~[predicate(3, [element]), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]=>id~scope(4)..drefs~[4]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), 4]..conds~[predicate(4, [set]), neg(id~neg(scope(4))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), 4]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), 4]..conds~[predicate(4, 3, [contain])])]]], id~proof(5)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..conds~[id~6..drefs~[5, 6]..mrefs~[args~[]..dref~5..name~y..type~variable..arity~0]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6]..conds~[math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), predicate(6, [element]), predicate(5, 6, [=])]==>id~conseq(6)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0), 9]..conds~[id~7..drefs~[7]..mrefs~[args~[]..dref~7..name~x..type~variable..arity~0]..rrefs~[axiom(1)]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0)]..conds~[predicate(7, [set]), math_id(7, args~[]..dref~7..name~x..type~variable..arity~0), neg(id~neg(7)..drefs~[8]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0), 8]..conds~[predicate(8, [element]), predicate(7, 8, [contain])])], id~8..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0)]..conds~[neg(id~neg(8)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0)]..conds~[predicate(7, 5, [contain])])], id~9..drefs~[9]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0)]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0), 9]..conds~[predicate(9, [set]), neg(id~neg(9)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0), 9]..accafter~[math_id(1, args~[]..dref~1..name~u..type~variable..arity~0), math_id(5, args~[]..dref~5..name~y..type~variable..arity~0), 6, math_id(7, args~[]..dref~7..name~x..type~variable..arity~0), 9]..conds~[predicate(9, 5, [contain])])]]])]].

test('very long text'):-
	build_prs(PRS,[sentence(1,[fix,math([x])]),sentence(2,[then,there,is,a,set,math([u]),such,that,math([u]),contains,math([x])]),sentence(3,[lemma,14.1]),sentence(4,[consider,math([y])]),sentence(5,[then,some,set,does,not,contain,math([y])]),sentence(6,[proof]),sentence(7,[math([x]),does,not,contain,math([y])]),sentence(8,[qed]),sentence(9,[then,by,lemma,14.1,for,every,set,math([z]),math([z]),contains,math([u])]),sentence(10,[thus,math([x]),does,not,contain,math([z])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[ (id~1..drefs~[1]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)])==> (id~conseq(1)..drefs~[]..mrefs~[]..conds~[id~2..drefs~[2]..mrefs~[type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small]..conds~[predicate(2, [set]), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), predicate(2, 1, [contain])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)], (id~ass(3)..drefs~[]..mrefs~[]..conds~[id~4..drefs~[3]..mrefs~[type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)])==> (id~conseq(3)..drefs~[]..mrefs~[]..conds~[theorem(lemma, id~goal(3)..drefs~[]..mrefs~[]..conds~[id~5..drefs~[4]..mrefs~[]..conds~[predicate(4, [set]), neg(id~neg(5)..drefs~[]..mrefs~[]..conds~[predicate(4, 3, [contain])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), 4]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), 4])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), 4]]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), 4], id~proof(6)..drefs~[]..mrefs~[]..conds~[id~7..drefs~[]..mrefs~[]..conds~[neg(id~neg(7)..drefs~[]..mrefs~[]..conds~[predicate(1, 3, [contain])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(3, type~variable..name~y..dref~3..arity~0..args~[]..alph~latin..cap~small), 4]), id~9..drefs~[]..mrefs~[]..conds~[ (id~noun_phrase(9)..drefs~[5]..mrefs~[type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small]..conds~[predicate(5, [set]), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small)])=> (id~scope(9)..drefs~[]..mrefs~[]..conds~[predicate(5, 2, [contain])]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~variable..name~z..dref~5..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[goal(3)]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)]]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~variable..name~u..dref~2..arity~0..args~[]..alph~latin..cap~small)]), id~10..drefs~[6]..mrefs~[type~variable..name~x..dref~6..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(6, type~variable..name~x..dref~6..arity~0..args~[]..alph~latin..cap~small), neg(id~neg(10)..drefs~[7]..mrefs~[type~variable..name~z..dref~7..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(7, type~variable..name~z..dref~7..arity~0..args~[]..alph~latin..cap~small), predicate(6, 7, [contain])]..rrefs~[]..accbefore~[math_id(6, type~variable..name~x..dref~6..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(6, type~variable..name~x..dref~6..arity~0..args~[]..alph~latin..cap~small), math_id(7, type~variable..name~z..dref~7..arity~0..args~[]..alph~latin..cap~small)])]..rrefs~[]..accbefore~[]..accafter~[math_id(6, type~variable..name~x..dref~6..arity~0..args~[]..alph~latin..cap~small)]]..rrefs~[]..accbefore~[]..accafter~[math_id(6, type~variable..name~x..dref~6..arity~0..args~[]..alph~latin..cap~small)].

% Warning tests

test('comma-with-or warning') :-
	clear_messages,
	build_prs(PRS,[sentence(1,['for','all',math([x]),',',math([y]),',',math([z]),',',math([u]),',','if',math([x,'\geq',y]),',',math([z,>,u]),'or',math([x,>,y]),',',math([z,'\geq',u]),',','then',math([x,*,z,>,y,*,u])])]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~1..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[]..accafter~[]..conds~[id~noun_phrase(1)..drefs~[1, 2, 3, 4, 5]..mrefs~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0, args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..rrefs~[]..accbefore~[]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..conds~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]=>id~scope(1)..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..conds~[id~prot(scope(1))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..conds~[id~disjunct1(prot(scope(1)))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(6, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~geq..type~relation..arity~2), math_id(7, args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~greater..type~relation..arity~2)]..conds~[id~conjunct1(prot(scope(1)))..drefs~[6]..mrefs~[args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~geq..type~relation..arity~2]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(6, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~geq..type~relation..arity~2)]..conds~[math_id(6, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~geq..type~relation..arity~2), holds(6)], id~conjunct2(prot(scope(1)))..drefs~[7]..mrefs~[args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~greater..type~relation..arity~2]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(6, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~geq..type~relation..arity~2)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(6, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~geq..type~relation..arity~2), math_id(7, args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~greater..type~relation..arity~2)]..conds~[math_id(7, args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~greater..type~relation..arity~2), holds(7)]]v id~disjunct2(prot(scope(1)))..drefs~[]..mrefs~[]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(8, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~greater..type~relation..arity~2), math_id(9, args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~geq..type~relation..arity~2)]..conds~[id~conjunct1(disjunct2(prot(scope(1))))..drefs~[8]..mrefs~[args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~greater..type~relation..arity~2]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(8, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~greater..type~relation..arity~2)]..conds~[math_id(8, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~greater..type~relation..arity~2), holds(8)], id~conjunct2(disjunct2(prot(scope(1))))..drefs~[9]..mrefs~[args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~geq..type~relation..arity~2]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(8, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~greater..type~relation..arity~2)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(8, args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~3..name~y..type~variable..arity~0]..name~greater..type~relation..arity~2), math_id(9, args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~geq..type~relation..arity~2)]..conds~[math_id(9, args~[args~[]..dref~4..name~z..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~geq..type~relation..arity~2), holds(9)]]]=>id~apod(scope(1))..drefs~[10]..mrefs~[args~[args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~4..name~z..type~variable..arity~0]..name~mul..type~function..arity~2, args~[args~[]..dref~3..name~y..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~mul..type~function..arity~2]..name~greater..type~relation..arity~2]..rrefs~[]..accbefore~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0)]..accafter~[plural_dref(1, [2, 3, 4, 5]), math_id(2, args~[]..dref~2..name~x..type~variable..arity~0), math_id(3, args~[]..dref~3..name~y..type~variable..arity~0), math_id(4, args~[]..dref~4..name~z..type~variable..arity~0), math_id(5, args~[]..dref~5..name~u..type~variable..arity~0), math_id(10, args~[args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~4..name~z..type~variable..arity~0]..name~mul..type~function..arity~2, args~[args~[]..dref~3..name~y..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~mul..type~function..arity~2]..name~greater..type~relation..arity~2)]..conds~[math_id(10, args~[args~[args~[]..dref~2..name~x..type~variable..arity~0, args~[]..dref~4..name~z..type~variable..arity~0]..name~mul..type~function..arity~2, args~[args~[]..dref~3..name~y..type~variable..arity~0, args~[]..dref~5..name~u..type~variable..arity~0]..name~mul..type~function..arity~2]..name~greater..type~relation..arity~2), holds(10)]]]],
	get_messages([message(warning, grammarWarning, sentence_coord, 1, 'Note that the clause-joining comma in this sentence is interpreted as "and" and not as "or". Clause-joining commas are always interpreted as "and" in Naproche.')]).

test('recursive definition with accessible-variable warning'):-
	clear_messages,
	build_prs(PRS,[
	sentence(1,[math([x,=,x])]),
	sentence(2,['definition','1']),
	sentence(3,['define',math([+]),'recursively']),
	sentence(4,[math([x,+,'1',=,x,succ])]),
	sentence(5,[math([x,+,y,succ,=,'(',x,+,y,')',succ])])
	]),
	!,
	PRS = id~0..drefs~[]..mrefs~[]..conds~[id~1..drefs~[1, 2]..mrefs~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]]..conds~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]), holds(2)]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small])], + :: (id~domain(3)..drefs~[3, 4]..mrefs~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small]..conds~[math_id(3, type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small])]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]), math_id(3, type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small)])=> (id~definiens(3)..drefs~[5, 6]..mrefs~[type~relation..name~ (=)..arity~2..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]], type~function..name~succ..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small]], type~relation..name~ (=)..arity~2..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~function..name~succ..args~[type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small]], type~function..name~succ..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small]]]]..conds~[math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]], type~function..name~succ..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small]]), holds(5), math_id(6, type~relation..name~ (=)..arity~2..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~function..name~succ..args~[type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small]], type~function..name~succ..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small]]]), holds(6)]..rrefs~[]..accbefore~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]), math_id(3, type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small)]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small]), math_id(3, type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small), math_id(4, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small), math_id(5, type~relation..name~ (=)..arity~2..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~constant..name~'1'..arity~0..args~[]], type~function..name~succ..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small]]), math_id(6, type~relation..name~ (=)..arity~2..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~function..name~succ..args~[type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small]], type~function..name~succ..args~[type~function..name~plus..arity~2..args~[type~variable..name~x..dref~3..arity~0..args~[]..alph~latin..cap~small, type~variable..name~y..dref~4..arity~0..args~[]..alph~latin..cap~small]]])])]..rrefs~[]..accbefore~[]..accafter~[math_id(1, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small), math_id(2, type~relation..name~ (=)..arity~2..args~[type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small, type~variable..name~x..dref~1..arity~0..args~[]..alph~latin..cap~small])],
	get_messages([message(warning, prsWarning, create_math_ids, [domain(3), x], 'The variable introduced in this sentence is already in use')]).

% Error tests
test('excessive comma') :-
	clear_messages,
	\+ build_prs(_,[sentence(1,[math([x]),'is','even','and',',',math([y]),'is','odd'])]),
	get_messages([message(error, grammarError, naproche_text, [1, 4], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).
	
test('consequence conjunction in assumption') :-
	clear_messages,
	\+ build_prs(_,[sentence(1,['assume',math([x]),'is','even','and',therefore,math([y]),'is','even'])]),
	get_messages([message(error, grammarError, naproche_text, [1, 4], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).

test('missing qed'):-
	clear_messages,
	\+ build_prs(_,[sentence(1,[axiom,1]),sentence(2,[there,is,a,set,math([u]),such,that,math([u]),contains,no,element]),sentence(3,[lemma]),sentence(4,[for,every,element,math([y]),some,set,does,not,contain,math([y])]),sentence(5,[proof]),sentence(6,[let,math([y]),be,an,element]),sentence(7,[then,by,axiom,1,there,is,a,set,math([x]),such,that,math([x]),contains,no,element]),sentence(8,[then,math([x]),does,not,contain,math([y])]),sentence(9,[so,some,set,does,not,contain,math([y])])]),
	get_messages([message(error, grammarError, naproche_text, [3, 1], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.'), message(error, grammarError, expecting_proof_and_qed, 3, 'This lemma is missing a "qed".')]).

test('empty proof'):-
    clear_messages,
    \+ build_prs(_,[
        sentence(1,['axiom','3']),
        sentence(2,['for','every',math([x]),',',math([x,succ,'\neq','1'])]),
        sentence(3,['axiom','4']),
        sentence(4,['if',math([x,succ,=,y,succ]),',','then',math([x,=,y])]),
        sentence(5,['theorem','1']),
        sentence(6,['if',math([x,'\neq',y]),'then',math([x,succ,'\neq',y,succ])]),
        sentence(7,['proof']),
        sentence(8,['qed'])
    ]),
    get_messages([message(error, grammarError, naproche_text, [5, 2], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.'), message(error, grammarError, expecting_proof_and_qed, 5, 'This theorem has an empty proof.')]),
    !.


test('reference to Axiom does not exist'):-
	clear_messages,
	\+ build_prs(_,[
    sentence(1,['theorem','1']),
    sentence(2,[math([x,=,x])]),
    sentence(3,['proof']),
    sentence(4,['by','axiom','5','we','have',math([x,=,x])]),
    sentence(5,['qed'])
    ]),
	get_messages([message(error, referenceError, reference, 4, 'The referenced Axiom 5 does not exist')]).

test('reference to Definition does not exist'):-
    clear_messages,
    \+ build_prs(_,[
    sentence(1,['theorem','1']),
    sentence(2,[math([x,=,x])]),
    sentence(3,['proof']),
    sentence(4,['by','definition','5','we','have',math([x,=,x])]),
    sentence(5,['qed'])
    ]),
    get_messages([message(error, referenceError, reference, 4, 'The referenced Definition 5 does not exist')]),
    !.

test('reference to Lemma does not exist'):-
    clear_messages,
    \+ build_prs(_,[
	sentence(1,['theorem','1']),
	sentence(2,[math([x,=,x])]),
	sentence(3,['proof']),
	sentence(4,['by','lemma','5','we','have',math([x,=,x])]),
	sentence(5,['qed'])
	]),
    get_messages([message(error, referenceError, reference, 4, 'The referenced Lemma 5 does not exist yet')]),
    !.

test('reference to Theorem does not exist'):-
    clear_messages,
	\+ build_prs(_,[
    sentence(1,['theorem','1']),
    sentence(2,[math([x,=,x])]),
    sentence(3,['proof']),
    sentence(4,['by','theorem','5','we','have',math([x,=,x])]),
    sentence(5,['qed'])
    ]),
	get_messages([message(error, referenceError, reference, 4, 'The referenced Theorem 5 does not exist yet')]),
    !.
 

test('explicit function definition error message'):-
	clear_messages,
	\+ build_prs(_,[sentence(1,[define,math([f,'(',x,')']),to,be,math([y])])]),
	get_messages([message(error, prsError, no_new_var, [domain(1), y], 'Used newly introduced variable in the term that defines a function')|_]).

test('fail after complex such-that clause'):-
	clear_messages,
	\+ build_prs(_,[sentence(1,[no,even,integer,math([x]),such,that,for,all,math([y]),math([x,'*',y]),is,positive,divide,math(['2'])])]),
	get_messages([message(error, grammarError, naproche_text, [1, 2], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).

test('missing multiplication sign'):-
	clear_messages,
	\+ build_prs(_,[
	sentence(1, [theorem, 32]),
	sentence(2, [for, all, math([z]), (,), math([x, >, y]), implies, math([x, *, z, >, y, *, z]), (,), math([x, =, y]), implies, math([x, *, z, =, y, *, z]), and, math([x, <, y]), implies, math([x, *, z, <, y, *, z])]),
	sentence(3, [proof]),
	sentence(4, [let, math([z]), be, given]),
	sentence(5, [if, math([x, >, y]), (,), then, math([x, =, y, +, u]), (,), 'i.e.', math([x, *, z, =, '(', y, +, u, ')', *, z, =, '(', y, *, z, ')', +, '(', u, *, z, ')', >, y, *, z])]),
	sentence(6, [if, math([x, =, y]), (,), then, clearly, math([x, *, z, =, y, *, z])]),
	sentence(7, [if, math([x, <, y]), (,), then, math([y, >, x]), (,), 'i.e.', math([yz, >, xz]), (,), 'i.e.', math([xz, <, yz])]),
	sentence(8, [qed])
	]),
	get_messages([message(error, grammarError, naproche_text, [7, 4], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).

test('too many thus-s'):-
	clear_messages,
	\+ build_prs(_,[sentence(1,[suppose,math([x]),is,even,and,math([x]),is,prime]),sentence(2,[then,math([x]),is,not,odd]),sentence(3,[so,math([x,'=','2'])]),sentence(4,[thus,every,even,prime,number,is,an,math([x]),such,that,math([x,'=','2'])]),sentence(4,[thus,there,is,no,number])]),
	get_messages([message(error, grammarError, naproche_text, [4, 5], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).

test('long error test'):-
	clear_messages,
	\+ build_prs(_,[sentence(1,[axiom,1]),sentence(2,[there,is,a,set,math([u]),such,that,math([u]),contains,no,element]),sentence(3,[lemma]),sentence(4,[for,every,element,math([y]),some,set,does,not,contain,math([y])]),sentence(5,[proof]),sentence(6,[let,math([y]),be,an,element]),sentence(7,[then,by,axiom,1,there,is,a,set,math([x]),such,that,math([x]),contains,no,element]),sentence(8,[then,math([x]),do,not,contain,math([y])]),sentence(9,[so,some,set,does,not,contain,math([y])]),sentence(10,[qed])]),
	get_messages([message(error, grammarError, naproche_text, [8, 4], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).

test('missing article'):-
	clear_messages,
	\+ build_prs(_,[sentence(1, [definition, 2]),sentence(2, [define, math([x, >, y]), iff, there, is, math([u]), such, that, math([x, =, y, +, u])])]),
	get_messages([message(error, grammarError, naproche_text, [2, 3], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).

test('illegitimate NP coordination') :-
	clear_messages,
	\+ build_prs(_,[sentence(1,[math([x]),',',math([y]),'or',math([z]),'is','even'])]),
	get_messages([message(error, grammarError, naproche_text, [1, 4], 'This is the first sentence that could not be parsed. The highlighted word is the first word that could not be parsed.')]).
	

:-end_tests(prs).
